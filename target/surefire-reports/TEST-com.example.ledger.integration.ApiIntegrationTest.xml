<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd" version="3.0.2" name="com.example.ledger.integration.ApiIntegrationTest" time="2.804" tests="6" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="21"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/Users/tomma/GIT/jraft_test/target/test-classes:/Users/tomma/GIT/jraft_test/target/classes:/Users/tomma/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.4.6/spring-boot-starter-data-jpa-3.4.6.jar:/Users/tomma/.m2/repository/org/springframework/boot/spring-boot-starter/3.4.6/spring-boot-starter-3.4.6.jar:/Users/tomma/.m2/repository/org/springframework/boot/spring-boot/3.4.6/spring-boot-3.4.6.jar:/Users/tomma/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.4.6/spring-boot-autoconfigure-3.4.6.jar:/Users/tomma/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.4.6/spring-boot-starter-logging-3.4.6.jar:/Users/tomma/.m2/repository/ch/qos/logback/logback-classic/1.5.18/logback-classic-1.5.18.jar:/Users/tomma/.m2/repository/ch/qos/logback/logback-core/1.5.18/logback-core-1.5.18.jar:/Users/tomma/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.24.3/log4j-to-slf4j-2.24.3.jar:/Users/tomma/.m2/repository/org/apache/logging/log4j/log4j-api/2.24.3/log4j-api-2.24.3.jar:/Users/tomma/.m2/repository/org/slf4j/jul-to-slf4j/2.0.17/jul-to-slf4j-2.0.17.jar:/Users/tomma/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/tomma/.m2/repository/org/yaml/snakeyaml/2.3/snakeyaml-2.3.jar:/Users/tomma/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.4.6/spring-boot-starter-jdbc-3.4.6.jar:/Users/tomma/.m2/repository/com/zaxxer/HikariCP/5.1.0/HikariCP-5.1.0.jar:/Users/tomma/.m2/repository/org/springframework/spring-jdbc/6.2.7/spring-jdbc-6.2.7.jar:/Users/tomma/.m2/repository/org/hibernate/orm/hibernate-core/6.6.15.Final/hibernate-core-6.6.15.Final.jar:/Users/tomma/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/tomma/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/tomma/.m2/repository/org/jboss/logging/jboss-logging/3.6.1.Final/jboss-logging-3.6.1.Final.jar:/Users/tomma/.m2/repository/org/hibernate/common/hibernate-commons-annotations/7.0.3.Final/hibernate-commons-annotations-7.0.3.Final.jar:/Users/tomma/.m2/repository/io/smallrye/jandex/3.2.0/jandex-3.2.0.jar:/Users/tomma/.m2/repository/com/fasterxml/classmate/1.7.0/classmate-1.7.0.jar:/Users/tomma/.m2/repository/net/bytebuddy/byte-buddy/1.15.11/byte-buddy-1.15.11.jar:/Users/tomma/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.5/jaxb-runtime-4.0.5.jar:/Users/tomma/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.5/jaxb-core-4.0.5.jar:/Users/tomma/.m2/repository/org/eclipse/angus/angus-activation/2.0.2/angus-activation-2.0.2.jar:/Users/tomma/.m2/repository/org/glassfish/jaxb/txw2/4.0.5/txw2-4.0.5.jar:/Users/tomma/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/tomma/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/tomma/.m2/repository/org/antlr/antlr4-runtime/4.13.0/antlr4-runtime-4.13.0.jar:/Users/tomma/.m2/repository/org/springframework/data/spring-data-jpa/3.4.6/spring-data-jpa-3.4.6.jar:/Users/tomma/.m2/repository/org/springframework/data/spring-data-commons/3.4.6/spring-data-commons-3.4.6.jar:/Users/tomma/.m2/repository/org/springframework/spring-orm/6.2.7/spring-orm-6.2.7.jar:/Users/tomma/.m2/repository/org/springframework/spring-context/6.2.7/spring-context-6.2.7.jar:/Users/tomma/.m2/repository/org/springframework/spring-aop/6.2.7/spring-aop-6.2.7.jar:/Users/tomma/.m2/repository/org/springframework/spring-tx/6.2.7/spring-tx-6.2.7.jar:/Users/tomma/.m2/repository/org/springframework/spring-beans/6.2.7/spring-beans-6.2.7.jar:/Users/tomma/.m2/repository/org/springframework/spring-aspects/6.2.7/spring-aspects-6.2.7.jar:/Users/tomma/.m2/repository/org/aspectj/aspectjweaver/1.9.24/aspectjweaver-1.9.24.jar:/Users/tomma/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.4.6/spring-boot-starter-validation-3.4.6.jar:/Users/tomma/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.41/tomcat-embed-el-10.1.41.jar:/Users/tomma/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.2.Final/hibernate-validator-8.0.2.Final.jar:/Users/tomma/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/tomma/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.4.6/spring-boot-starter-web-3.4.6.jar:/Users/tomma/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.4.6/spring-boot-starter-json-3.4.6.jar:/Users/tomma/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.18.4/jackson-databind-2.18.4.jar:/Users/tomma/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.18.4/jackson-annotations-2.18.4.jar:/Users/tomma/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.18.4/jackson-core-2.18.4.jar:/Users/tomma/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.18.4/jackson-datatype-jdk8-2.18.4.jar:/Users/tomma/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.18.4/jackson-datatype-jsr310-2.18.4.jar:/Users/tomma/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.18.4/jackson-module-parameter-names-2.18.4.jar:/Users/tomma/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.4.6/spring-boot-starter-tomcat-3.4.6.jar:/Users/tomma/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.41/tomcat-embed-core-10.1.41.jar:/Users/tomma/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.41/tomcat-embed-websocket-10.1.41.jar:/Users/tomma/.m2/repository/org/springframework/spring-web/6.2.7/spring-web-6.2.7.jar:/Users/tomma/.m2/repository/io/micrometer/micrometer-observation/1.14.7/micrometer-observation-1.14.7.jar:/Users/tomma/.m2/repository/io/micrometer/micrometer-commons/1.14.7/micrometer-commons-1.14.7.jar:/Users/tomma/.m2/repository/org/springframework/spring-webmvc/6.2.7/spring-webmvc-6.2.7.jar:/Users/tomma/.m2/repository/org/springframework/spring-expression/6.2.7/spring-expression-6.2.7.jar:/Users/tomma/.m2/repository/com/h2database/h2/2.3.232/h2-2.3.232.jar:/Users/tomma/.m2/repository/com/alipay/sofa/jraft-core/1.3.14/jraft-core-1.3.14.jar:/Users/tomma/.m2/repository/org/ow2/asm/asm/6.0/asm-6.0.jar:/Users/tomma/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:/Users/tomma/.m2/repository/org/rocksdb/rocksdbjni/8.8.1/rocksdbjni-8.8.1.jar:/Users/tomma/.m2/repository/net/java/dev/jna/jna/5.5.0/jna-5.5.0.jar:/Users/tomma/.m2/repository/org/jctools/jctools-core/2.1.1/jctools-core-2.1.1.jar:/Users/tomma/.m2/repository/org/slf4j/slf4j-api/2.0.17/slf4j-api-2.0.17.jar:/Users/tomma/.m2/repository/com/lmax/disruptor/3.3.7/disruptor-3.3.7.jar:/Users/tomma/.m2/repository/com/google/protobuf/protobuf-java/3.5.1/protobuf-java-3.5.1.jar:/Users/tomma/.m2/repository/commons-io/commons-io/2.8.0/commons-io-2.8.0.jar:/Users/tomma/.m2/repository/commons-lang/commons-lang/2.6/commons-lang-2.6.jar:/Users/tomma/.m2/repository/com/alipay/sofa/bolt/1.6.4/bolt-1.6.4.jar:/Users/tomma/.m2/repository/io/netty/netty-all/4.1.121.Final/netty-all-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-buffer/4.1.121.Final/netty-buffer-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-codec/4.1.121.Final/netty-codec-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-codec-dns/4.1.121.Final/netty-codec-dns-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-codec-haproxy/4.1.121.Final/netty-codec-haproxy-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-codec-http/4.1.121.Final/netty-codec-http-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-codec-http2/4.1.121.Final/netty-codec-http2-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-codec-memcache/4.1.121.Final/netty-codec-memcache-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-codec-mqtt/4.1.121.Final/netty-codec-mqtt-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-codec-redis/4.1.121.Final/netty-codec-redis-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-codec-smtp/4.1.121.Final/netty-codec-smtp-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-codec-socks/4.1.121.Final/netty-codec-socks-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-codec-stomp/4.1.121.Final/netty-codec-stomp-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-codec-xml/4.1.121.Final/netty-codec-xml-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-common/4.1.121.Final/netty-common-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-handler/4.1.121.Final/netty-handler-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-transport-native-unix-common/4.1.121.Final/netty-transport-native-unix-common-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-handler-proxy/4.1.121.Final/netty-handler-proxy-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-handler-ssl-ocsp/4.1.121.Final/netty-handler-ssl-ocsp-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-resolver/4.1.121.Final/netty-resolver-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-resolver-dns/4.1.121.Final/netty-resolver-dns-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-transport/4.1.121.Final/netty-transport-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-transport-rxtx/4.1.121.Final/netty-transport-rxtx-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-transport-sctp/4.1.121.Final/netty-transport-sctp-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-transport-udt/4.1.121.Final/netty-transport-udt-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-transport-classes-epoll/4.1.121.Final/netty-transport-classes-epoll-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-transport-classes-kqueue/4.1.121.Final/netty-transport-classes-kqueue-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-resolver-dns-classes-macos/4.1.121.Final/netty-resolver-dns-classes-macos-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-transport-native-epoll/4.1.121.Final/netty-transport-native-epoll-4.1.121.Final-linux-x86_64.jar:/Users/tomma/.m2/repository/io/netty/netty-transport-native-epoll/4.1.121.Final/netty-transport-native-epoll-4.1.121.Final-linux-aarch_64.jar:/Users/tomma/.m2/repository/io/netty/netty-transport-native-epoll/4.1.121.Final/netty-transport-native-epoll-4.1.121.Final-linux-riscv64.jar:/Users/tomma/.m2/repository/io/netty/netty-transport-native-kqueue/4.1.121.Final/netty-transport-native-kqueue-4.1.121.Final-osx-x86_64.jar:/Users/tomma/.m2/repository/io/netty/netty-transport-native-kqueue/4.1.121.Final/netty-transport-native-kqueue-4.1.121.Final-osx-aarch_64.jar:/Users/tomma/.m2/repository/io/netty/netty-resolver-dns-native-macos/4.1.121.Final/netty-resolver-dns-native-macos-4.1.121.Final-osx-x86_64.jar:/Users/tomma/.m2/repository/io/netty/netty-resolver-dns-native-macos/4.1.121.Final/netty-resolver-dns-native-macos-4.1.121.Final-osx-aarch_64.jar:/Users/tomma/.m2/repository/com/alipay/sofa/common/sofa-common-tools/1.0.12/sofa-common-tools-1.0.12.jar:/Users/tomma/.m2/repository/com/alipay/sofa/hessian/3.3.6/hessian-3.3.6.jar:/Users/tomma/.m2/repository/io/dropwizard/metrics/metrics-core/4.0.2/metrics-core-4.0.2.jar:/Users/tomma/.m2/repository/com/alipay/sofa/rpc-grpc-impl/1.3.14/rpc-grpc-impl-1.3.14.jar:/Users/tomma/.m2/repository/io/grpc/grpc-netty-shaded/1.50.2/grpc-netty-shaded-1.50.2.jar:/Users/tomma/.m2/repository/com/google/guava/guava/31.1-android/guava-31.1-android.jar:/Users/tomma/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:/Users/tomma/.m2/repository/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/Users/tomma/.m2/repository/org/checkerframework/checker-qual/3.12.0/checker-qual-3.12.0.jar:/Users/tomma/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar:/Users/tomma/.m2/repository/com/google/errorprone/error_prone_annotations/2.14.0/error_prone_annotations-2.14.0.jar:/Users/tomma/.m2/repository/io/perfmark/perfmark-api/0.25.0/perfmark-api-0.25.0.jar:/Users/tomma/.m2/repository/io/grpc/grpc-core/1.50.2/grpc-core-1.50.2.jar:/Users/tomma/.m2/repository/com/google/code/gson/gson/2.11.0/gson-2.11.0.jar:/Users/tomma/.m2/repository/com/google/android/annotations/4.1.1.4/annotations-4.1.1.4.jar:/Users/tomma/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.21/animal-sniffer-annotations-1.21.jar:/Users/tomma/.m2/repository/io/grpc/grpc-protobuf/1.50.2/grpc-protobuf-1.50.2.jar:/Users/tomma/.m2/repository/io/grpc/grpc-api/1.50.2/grpc-api-1.50.2.jar:/Users/tomma/.m2/repository/io/grpc/grpc-context/1.50.2/grpc-context-1.50.2.jar:/Users/tomma/.m2/repository/com/google/api/grpc/proto-google-common-protos/2.9.0/proto-google-common-protos-2.9.0.jar:/Users/tomma/.m2/repository/io/grpc/grpc-protobuf-lite/1.50.2/grpc-protobuf-lite-1.50.2.jar:/Users/tomma/.m2/repository/io/grpc/grpc-stub/1.50.2/grpc-stub-1.50.2.jar:/Users/tomma/.m2/repository/org/projectlombok/lombok/1.18.38/lombok-1.18.38.jar:/Users/tomma/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.4.6/spring-boot-starter-test-3.4.6.jar:/Users/tomma/.m2/repository/org/springframework/boot/spring-boot-test/3.4.6/spring-boot-test-3.4.6.jar:/Users/tomma/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.4.6/spring-boot-test-autoconfigure-3.4.6.jar:/Users/tomma/.m2/repository/com/jayway/jsonpath/json-path/2.9.0/json-path-2.9.0.jar:/Users/tomma/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.2/jakarta.xml.bind-api-4.0.2.jar:/Users/tomma/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.3/jakarta.activation-api-2.1.3.jar:/Users/tomma/.m2/repository/net/minidev/json-smart/2.5.2/json-smart-2.5.2.jar:/Users/tomma/.m2/repository/net/minidev/accessors-smart/2.5.2/accessors-smart-2.5.2.jar:/Users/tomma/.m2/repository/org/assertj/assertj-core/3.26.3/assertj-core-3.26.3.jar:/Users/tomma/.m2/repository/org/awaitility/awaitility/4.2.2/awaitility-4.2.2.jar:/Users/tomma/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/tomma/.m2/repository/org/junit/jupiter/junit-jupiter/5.11.4/junit-jupiter-5.11.4.jar:/Users/tomma/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.11.4/junit-jupiter-api-5.11.4.jar:/Users/tomma/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/tomma/.m2/repository/org/junit/platform/junit-platform-commons/1.11.4/junit-platform-commons-1.11.4.jar:/Users/tomma/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/tomma/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.11.4/junit-jupiter-params-5.11.4.jar:/Users/tomma/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.11.4/junit-jupiter-engine-5.11.4.jar:/Users/tomma/.m2/repository/org/junit/platform/junit-platform-engine/1.11.4/junit-platform-engine-1.11.4.jar:/Users/tomma/.m2/repository/org/mockito/mockito-core/5.14.2/mockito-core-5.14.2.jar:/Users/tomma/.m2/repository/net/bytebuddy/byte-buddy-agent/1.15.11/byte-buddy-agent-1.15.11.jar:/Users/tomma/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/tomma/.m2/repository/org/mockito/mockito-junit-jupiter/5.14.2/mockito-junit-jupiter-5.14.2.jar:/Users/tomma/.m2/repository/org/skyscreamer/jsonassert/1.5.3/jsonassert-1.5.3.jar:/Users/tomma/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/tomma/.m2/repository/org/springframework/spring-core/6.2.7/spring-core-6.2.7.jar:/Users/tomma/.m2/repository/org/springframework/spring-jcl/6.2.7/spring-jcl-6.2.7.jar:/Users/tomma/.m2/repository/org/springframework/spring-test/6.2.7/spring-test-6.2.7.jar:/Users/tomma/.m2/repository/org/xmlunit/xmlunit-core/2.10.1/xmlunit-core-2.10.1.jar:/Users/tomma/.m2/repository/org/testcontainers/junit-jupiter/1.20.6/junit-jupiter-1.20.6.jar:/Users/tomma/.m2/repository/org/testcontainers/testcontainers/1.20.6/testcontainers-1.20.6.jar:/Users/tomma/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar:/Users/tomma/.m2/repository/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2.jar:/Users/tomma/.m2/repository/org/apache/commons/commons-compress/1.24.0/commons-compress-1.24.0.jar:/Users/tomma/.m2/repository/org/rnorth/duct-tape/duct-tape/1.0.8/duct-tape-1.0.8.jar:/Users/tomma/.m2/repository/org/jetbrains/annotations/17.0.0/annotations-17.0.0.jar:/Users/tomma/.m2/repository/com/github/docker-java/docker-java-api/3.4.1/docker-java-api-3.4.1.jar:/Users/tomma/.m2/repository/com/github/docker-java/docker-java-transport-zerodep/3.4.1/docker-java-transport-zerodep-3.4.1.jar:/Users/tomma/.m2/repository/com/github/docker-java/docker-java-transport/3.4.1/docker-java-transport-3.4.1.jar:"/>
    <property name="java.vm.vendor" value="Amazon.com Inc."/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="catalina.useNaming" value="false"/>
    <property name="java.vendor.url" value="https://aws.amazon.com/corretto/"/>
    <property name="user.timezone" value="Asia/Hong_Kong"/>
    <property name="org.jboss.logging.provider" value="slf4j"/>
    <property name="os.name" value="Mac OS X"/>
    <property name="java.vm.specification.version" value="21"/>
    <property name="APPLICATION_NAME" value="jraft-ledger-system"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="HK"/>
    <property name="sun.boot.library.path" value="/Users/tomma/.sdkman/candidates/java/21.0.4-amzn/lib"/>
    <property name="sun.java.command" value="/Users/tomma/GIT/jraft_test/target/surefire/surefirebooter-20250608234444132_3.jar /Users/tomma/GIT/jraft_test/target/surefire 2025-06-08T23-44-44_097-jvmRun1 surefire-20250608234444132_1tmp surefire_0-20250608234444132_2tmp"/>
    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="/Users/tomma/GIT/jraft_test/target/test-classes:/Users/tomma/GIT/jraft_test/target/classes:/Users/tomma/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.4.6/spring-boot-starter-data-jpa-3.4.6.jar:/Users/tomma/.m2/repository/org/springframework/boot/spring-boot-starter/3.4.6/spring-boot-starter-3.4.6.jar:/Users/tomma/.m2/repository/org/springframework/boot/spring-boot/3.4.6/spring-boot-3.4.6.jar:/Users/tomma/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.4.6/spring-boot-autoconfigure-3.4.6.jar:/Users/tomma/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.4.6/spring-boot-starter-logging-3.4.6.jar:/Users/tomma/.m2/repository/ch/qos/logback/logback-classic/1.5.18/logback-classic-1.5.18.jar:/Users/tomma/.m2/repository/ch/qos/logback/logback-core/1.5.18/logback-core-1.5.18.jar:/Users/tomma/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.24.3/log4j-to-slf4j-2.24.3.jar:/Users/tomma/.m2/repository/org/apache/logging/log4j/log4j-api/2.24.3/log4j-api-2.24.3.jar:/Users/tomma/.m2/repository/org/slf4j/jul-to-slf4j/2.0.17/jul-to-slf4j-2.0.17.jar:/Users/tomma/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/tomma/.m2/repository/org/yaml/snakeyaml/2.3/snakeyaml-2.3.jar:/Users/tomma/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.4.6/spring-boot-starter-jdbc-3.4.6.jar:/Users/tomma/.m2/repository/com/zaxxer/HikariCP/5.1.0/HikariCP-5.1.0.jar:/Users/tomma/.m2/repository/org/springframework/spring-jdbc/6.2.7/spring-jdbc-6.2.7.jar:/Users/tomma/.m2/repository/org/hibernate/orm/hibernate-core/6.6.15.Final/hibernate-core-6.6.15.Final.jar:/Users/tomma/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/Users/tomma/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/Users/tomma/.m2/repository/org/jboss/logging/jboss-logging/3.6.1.Final/jboss-logging-3.6.1.Final.jar:/Users/tomma/.m2/repository/org/hibernate/common/hibernate-commons-annotations/7.0.3.Final/hibernate-commons-annotations-7.0.3.Final.jar:/Users/tomma/.m2/repository/io/smallrye/jandex/3.2.0/jandex-3.2.0.jar:/Users/tomma/.m2/repository/com/fasterxml/classmate/1.7.0/classmate-1.7.0.jar:/Users/tomma/.m2/repository/net/bytebuddy/byte-buddy/1.15.11/byte-buddy-1.15.11.jar:/Users/tomma/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.5/jaxb-runtime-4.0.5.jar:/Users/tomma/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.5/jaxb-core-4.0.5.jar:/Users/tomma/.m2/repository/org/eclipse/angus/angus-activation/2.0.2/angus-activation-2.0.2.jar:/Users/tomma/.m2/repository/org/glassfish/jaxb/txw2/4.0.5/txw2-4.0.5.jar:/Users/tomma/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/Users/tomma/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/Users/tomma/.m2/repository/org/antlr/antlr4-runtime/4.13.0/antlr4-runtime-4.13.0.jar:/Users/tomma/.m2/repository/org/springframework/data/spring-data-jpa/3.4.6/spring-data-jpa-3.4.6.jar:/Users/tomma/.m2/repository/org/springframework/data/spring-data-commons/3.4.6/spring-data-commons-3.4.6.jar:/Users/tomma/.m2/repository/org/springframework/spring-orm/6.2.7/spring-orm-6.2.7.jar:/Users/tomma/.m2/repository/org/springframework/spring-context/6.2.7/spring-context-6.2.7.jar:/Users/tomma/.m2/repository/org/springframework/spring-aop/6.2.7/spring-aop-6.2.7.jar:/Users/tomma/.m2/repository/org/springframework/spring-tx/6.2.7/spring-tx-6.2.7.jar:/Users/tomma/.m2/repository/org/springframework/spring-beans/6.2.7/spring-beans-6.2.7.jar:/Users/tomma/.m2/repository/org/springframework/spring-aspects/6.2.7/spring-aspects-6.2.7.jar:/Users/tomma/.m2/repository/org/aspectj/aspectjweaver/1.9.24/aspectjweaver-1.9.24.jar:/Users/tomma/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.4.6/spring-boot-starter-validation-3.4.6.jar:/Users/tomma/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.41/tomcat-embed-el-10.1.41.jar:/Users/tomma/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.2.Final/hibernate-validator-8.0.2.Final.jar:/Users/tomma/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/Users/tomma/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.4.6/spring-boot-starter-web-3.4.6.jar:/Users/tomma/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.4.6/spring-boot-starter-json-3.4.6.jar:/Users/tomma/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.18.4/jackson-databind-2.18.4.jar:/Users/tomma/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.18.4/jackson-annotations-2.18.4.jar:/Users/tomma/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.18.4/jackson-core-2.18.4.jar:/Users/tomma/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.18.4/jackson-datatype-jdk8-2.18.4.jar:/Users/tomma/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.18.4/jackson-datatype-jsr310-2.18.4.jar:/Users/tomma/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.18.4/jackson-module-parameter-names-2.18.4.jar:/Users/tomma/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.4.6/spring-boot-starter-tomcat-3.4.6.jar:/Users/tomma/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.41/tomcat-embed-core-10.1.41.jar:/Users/tomma/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.41/tomcat-embed-websocket-10.1.41.jar:/Users/tomma/.m2/repository/org/springframework/spring-web/6.2.7/spring-web-6.2.7.jar:/Users/tomma/.m2/repository/io/micrometer/micrometer-observation/1.14.7/micrometer-observation-1.14.7.jar:/Users/tomma/.m2/repository/io/micrometer/micrometer-commons/1.14.7/micrometer-commons-1.14.7.jar:/Users/tomma/.m2/repository/org/springframework/spring-webmvc/6.2.7/spring-webmvc-6.2.7.jar:/Users/tomma/.m2/repository/org/springframework/spring-expression/6.2.7/spring-expression-6.2.7.jar:/Users/tomma/.m2/repository/com/h2database/h2/2.3.232/h2-2.3.232.jar:/Users/tomma/.m2/repository/com/alipay/sofa/jraft-core/1.3.14/jraft-core-1.3.14.jar:/Users/tomma/.m2/repository/org/ow2/asm/asm/6.0/asm-6.0.jar:/Users/tomma/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:/Users/tomma/.m2/repository/org/rocksdb/rocksdbjni/8.8.1/rocksdbjni-8.8.1.jar:/Users/tomma/.m2/repository/net/java/dev/jna/jna/5.5.0/jna-5.5.0.jar:/Users/tomma/.m2/repository/org/jctools/jctools-core/2.1.1/jctools-core-2.1.1.jar:/Users/tomma/.m2/repository/org/slf4j/slf4j-api/2.0.17/slf4j-api-2.0.17.jar:/Users/tomma/.m2/repository/com/lmax/disruptor/3.3.7/disruptor-3.3.7.jar:/Users/tomma/.m2/repository/com/google/protobuf/protobuf-java/3.5.1/protobuf-java-3.5.1.jar:/Users/tomma/.m2/repository/commons-io/commons-io/2.8.0/commons-io-2.8.0.jar:/Users/tomma/.m2/repository/commons-lang/commons-lang/2.6/commons-lang-2.6.jar:/Users/tomma/.m2/repository/com/alipay/sofa/bolt/1.6.4/bolt-1.6.4.jar:/Users/tomma/.m2/repository/io/netty/netty-all/4.1.121.Final/netty-all-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-buffer/4.1.121.Final/netty-buffer-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-codec/4.1.121.Final/netty-codec-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-codec-dns/4.1.121.Final/netty-codec-dns-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-codec-haproxy/4.1.121.Final/netty-codec-haproxy-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-codec-http/4.1.121.Final/netty-codec-http-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-codec-http2/4.1.121.Final/netty-codec-http2-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-codec-memcache/4.1.121.Final/netty-codec-memcache-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-codec-mqtt/4.1.121.Final/netty-codec-mqtt-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-codec-redis/4.1.121.Final/netty-codec-redis-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-codec-smtp/4.1.121.Final/netty-codec-smtp-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-codec-socks/4.1.121.Final/netty-codec-socks-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-codec-stomp/4.1.121.Final/netty-codec-stomp-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-codec-xml/4.1.121.Final/netty-codec-xml-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-common/4.1.121.Final/netty-common-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-handler/4.1.121.Final/netty-handler-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-transport-native-unix-common/4.1.121.Final/netty-transport-native-unix-common-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-handler-proxy/4.1.121.Final/netty-handler-proxy-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-handler-ssl-ocsp/4.1.121.Final/netty-handler-ssl-ocsp-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-resolver/4.1.121.Final/netty-resolver-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-resolver-dns/4.1.121.Final/netty-resolver-dns-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-transport/4.1.121.Final/netty-transport-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-transport-rxtx/4.1.121.Final/netty-transport-rxtx-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-transport-sctp/4.1.121.Final/netty-transport-sctp-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-transport-udt/4.1.121.Final/netty-transport-udt-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-transport-classes-epoll/4.1.121.Final/netty-transport-classes-epoll-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-transport-classes-kqueue/4.1.121.Final/netty-transport-classes-kqueue-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-resolver-dns-classes-macos/4.1.121.Final/netty-resolver-dns-classes-macos-4.1.121.Final.jar:/Users/tomma/.m2/repository/io/netty/netty-transport-native-epoll/4.1.121.Final/netty-transport-native-epoll-4.1.121.Final-linux-x86_64.jar:/Users/tomma/.m2/repository/io/netty/netty-transport-native-epoll/4.1.121.Final/netty-transport-native-epoll-4.1.121.Final-linux-aarch_64.jar:/Users/tomma/.m2/repository/io/netty/netty-transport-native-epoll/4.1.121.Final/netty-transport-native-epoll-4.1.121.Final-linux-riscv64.jar:/Users/tomma/.m2/repository/io/netty/netty-transport-native-kqueue/4.1.121.Final/netty-transport-native-kqueue-4.1.121.Final-osx-x86_64.jar:/Users/tomma/.m2/repository/io/netty/netty-transport-native-kqueue/4.1.121.Final/netty-transport-native-kqueue-4.1.121.Final-osx-aarch_64.jar:/Users/tomma/.m2/repository/io/netty/netty-resolver-dns-native-macos/4.1.121.Final/netty-resolver-dns-native-macos-4.1.121.Final-osx-x86_64.jar:/Users/tomma/.m2/repository/io/netty/netty-resolver-dns-native-macos/4.1.121.Final/netty-resolver-dns-native-macos-4.1.121.Final-osx-aarch_64.jar:/Users/tomma/.m2/repository/com/alipay/sofa/common/sofa-common-tools/1.0.12/sofa-common-tools-1.0.12.jar:/Users/tomma/.m2/repository/com/alipay/sofa/hessian/3.3.6/hessian-3.3.6.jar:/Users/tomma/.m2/repository/io/dropwizard/metrics/metrics-core/4.0.2/metrics-core-4.0.2.jar:/Users/tomma/.m2/repository/com/alipay/sofa/rpc-grpc-impl/1.3.14/rpc-grpc-impl-1.3.14.jar:/Users/tomma/.m2/repository/io/grpc/grpc-netty-shaded/1.50.2/grpc-netty-shaded-1.50.2.jar:/Users/tomma/.m2/repository/com/google/guava/guava/31.1-android/guava-31.1-android.jar:/Users/tomma/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:/Users/tomma/.m2/repository/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/Users/tomma/.m2/repository/org/checkerframework/checker-qual/3.12.0/checker-qual-3.12.0.jar:/Users/tomma/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar:/Users/tomma/.m2/repository/com/google/errorprone/error_prone_annotations/2.14.0/error_prone_annotations-2.14.0.jar:/Users/tomma/.m2/repository/io/perfmark/perfmark-api/0.25.0/perfmark-api-0.25.0.jar:/Users/tomma/.m2/repository/io/grpc/grpc-core/1.50.2/grpc-core-1.50.2.jar:/Users/tomma/.m2/repository/com/google/code/gson/gson/2.11.0/gson-2.11.0.jar:/Users/tomma/.m2/repository/com/google/android/annotations/4.1.1.4/annotations-4.1.1.4.jar:/Users/tomma/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.21/animal-sniffer-annotations-1.21.jar:/Users/tomma/.m2/repository/io/grpc/grpc-protobuf/1.50.2/grpc-protobuf-1.50.2.jar:/Users/tomma/.m2/repository/io/grpc/grpc-api/1.50.2/grpc-api-1.50.2.jar:/Users/tomma/.m2/repository/io/grpc/grpc-context/1.50.2/grpc-context-1.50.2.jar:/Users/tomma/.m2/repository/com/google/api/grpc/proto-google-common-protos/2.9.0/proto-google-common-protos-2.9.0.jar:/Users/tomma/.m2/repository/io/grpc/grpc-protobuf-lite/1.50.2/grpc-protobuf-lite-1.50.2.jar:/Users/tomma/.m2/repository/io/grpc/grpc-stub/1.50.2/grpc-stub-1.50.2.jar:/Users/tomma/.m2/repository/org/projectlombok/lombok/1.18.38/lombok-1.18.38.jar:/Users/tomma/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.4.6/spring-boot-starter-test-3.4.6.jar:/Users/tomma/.m2/repository/org/springframework/boot/spring-boot-test/3.4.6/spring-boot-test-3.4.6.jar:/Users/tomma/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.4.6/spring-boot-test-autoconfigure-3.4.6.jar:/Users/tomma/.m2/repository/com/jayway/jsonpath/json-path/2.9.0/json-path-2.9.0.jar:/Users/tomma/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.2/jakarta.xml.bind-api-4.0.2.jar:/Users/tomma/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.3/jakarta.activation-api-2.1.3.jar:/Users/tomma/.m2/repository/net/minidev/json-smart/2.5.2/json-smart-2.5.2.jar:/Users/tomma/.m2/repository/net/minidev/accessors-smart/2.5.2/accessors-smart-2.5.2.jar:/Users/tomma/.m2/repository/org/assertj/assertj-core/3.26.3/assertj-core-3.26.3.jar:/Users/tomma/.m2/repository/org/awaitility/awaitility/4.2.2/awaitility-4.2.2.jar:/Users/tomma/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/tomma/.m2/repository/org/junit/jupiter/junit-jupiter/5.11.4/junit-jupiter-5.11.4.jar:/Users/tomma/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.11.4/junit-jupiter-api-5.11.4.jar:/Users/tomma/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/tomma/.m2/repository/org/junit/platform/junit-platform-commons/1.11.4/junit-platform-commons-1.11.4.jar:/Users/tomma/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/tomma/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.11.4/junit-jupiter-params-5.11.4.jar:/Users/tomma/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.11.4/junit-jupiter-engine-5.11.4.jar:/Users/tomma/.m2/repository/org/junit/platform/junit-platform-engine/1.11.4/junit-platform-engine-1.11.4.jar:/Users/tomma/.m2/repository/org/mockito/mockito-core/5.14.2/mockito-core-5.14.2.jar:/Users/tomma/.m2/repository/net/bytebuddy/byte-buddy-agent/1.15.11/byte-buddy-agent-1.15.11.jar:/Users/tomma/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/tomma/.m2/repository/org/mockito/mockito-junit-jupiter/5.14.2/mockito-junit-jupiter-5.14.2.jar:/Users/tomma/.m2/repository/org/skyscreamer/jsonassert/1.5.3/jsonassert-1.5.3.jar:/Users/tomma/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/tomma/.m2/repository/org/springframework/spring-core/6.2.7/spring-core-6.2.7.jar:/Users/tomma/.m2/repository/org/springframework/spring-jcl/6.2.7/spring-jcl-6.2.7.jar:/Users/tomma/.m2/repository/org/springframework/spring-test/6.2.7/spring-test-6.2.7.jar:/Users/tomma/.m2/repository/org/xmlunit/xmlunit-core/2.10.1/xmlunit-core-2.10.1.jar:/Users/tomma/.m2/repository/org/testcontainers/junit-jupiter/1.20.6/junit-jupiter-1.20.6.jar:/Users/tomma/.m2/repository/org/testcontainers/testcontainers/1.20.6/testcontainers-1.20.6.jar:/Users/tomma/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar:/Users/tomma/.m2/repository/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2.jar:/Users/tomma/.m2/repository/org/apache/commons/commons-compress/1.24.0/commons-compress-1.24.0.jar:/Users/tomma/.m2/repository/org/rnorth/duct-tape/duct-tape/1.0.8/duct-tape-1.0.8.jar:/Users/tomma/.m2/repository/org/jetbrains/annotations/17.0.0/annotations-17.0.0.jar:/Users/tomma/.m2/repository/com/github/docker-java/docker-java-api/3.4.1/docker-java-api-3.4.1.jar:/Users/tomma/.m2/repository/com/github/docker-java/docker-java-transport-zerodep/3.4.1/docker-java-transport-zerodep-3.4.1.jar:/Users/tomma/.m2/repository/com/github/docker-java/docker-java-transport/3.4.1/docker-java-transport-3.4.1.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/Users/tomma"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2024-07-16"/>
    <property name="java.home" value="/Users/tomma/.sdkman/candidates/java/21.0.4-amzn"/>
    <property name="file.separator" value="/"/>
    <property name="basedir" value="/Users/tomma/GIT/jraft_test"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="FILE_LOG_CHARSET" value="UTF-8"/>
    <property name="java.awt.headless" value="true"/>
    <property name="apple.awt.application.name" value="ForkedBooter"/>
    <property name="surefire.real.class.path" value="/Users/tomma/GIT/jraft_test/target/surefire/surefirebooter-20250608234444132_3.jar"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.runtime.version" value="21.0.4+7-LTS"/>
    <property name="user.name" value="tomma"/>
    <property name="stdout.encoding" value="UTF-8"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="15.5"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Corretto-21.0.4.7.1"/>
    <property name="localRepository" value="/Users/tomma/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://github.com/corretto/corretto-21/issues/"/>
    <property name="java.io.tmpdir" value="/var/folders/2f/mp0rjsjd75j31mxp6lbffgcw0000gn/T/"/>
    <property name="catalina.home" value="/private/var/folders/2f/mp0rjsjd75j31mxp6lbffgcw0000gn/T/tomcat.0.2987558215241736381"/>
    <property name="com.zaxxer.hikari.pool_number" value="1"/>
    <property name="java.version" value="21.0.4"/>
    <property name="user.dir" value="/Users/tomma/GIT/jraft_test"/>
    <property name="os.arch" value="aarch64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="PID" value="13071"/>
    <property name="CONSOLE_LOG_CHARSET" value="UTF-8"/>
    <property name="catalina.base" value="/private/var/folders/2f/mp0rjsjd75j31mxp6lbffgcw0000gn/T/tomcat.0.2987558215241736381"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/Users/tomma/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="stderr.encoding" value="UTF-8"/>
    <property name="java.vendor" value="Amazon.com Inc."/>
    <property name="java.vm.version" value="21.0.4+7-LTS"/>
    <property name="sun.io.unicode.encoding" value="UnicodeBig"/>
    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.class.version" value="65.0"/>
    <property name="CONSOLE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss} - %msg%n"/>
    <property name="LOGGED_APPLICATION_NAME" value="[jraft-ledger-system] "/>
  </properties>
  <testcase name="testBatchTransfer_SuccessAndIdempotency" classname="com.example.ledger.integration.ApiIntegrationTest" time="0.336">
    <system-out><![CDATA[23:44:44.473 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Found @SpringBootConfiguration com.example.ledger.LedgerApplication for test class com.example.ledger.integration.ApiIntegrationTest

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.6)

2025-06-08 23:44:44 - Starting ApiIntegrationTest using Java 21.0.4 with PID 13071 (started by tomma in /Users/tomma/GIT/jraft_test)
2025-06-08 23:44:44 - Running with Spring Boot v3.4.6, Spring v6.2.7
2025-06-08 23:44:44 - The following 1 profile is active: "test"
2025-06-08 23:44:44 - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-08 23:44:44 - Finished Spring Data repository scanning in 16 ms. Found 3 JPA repository interfaces.
2025-06-08 23:44:45 - Tomcat initialized with port 0 (http)
2025-06-08 23:44:45 - Starting service [Tomcat]
2025-06-08 23:44:45 - Starting Servlet engine: [Apache Tomcat/10.1.41]
2025-06-08 23:44:45 - Initializing Spring embedded WebApplicationContext
2025-06-08 23:44:45 - Root WebApplicationContext: initialization completed in 435 ms
2025-06-08 23:44:45 - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-08 23:44:45 - HHH000412: Hibernate ORM core version 6.6.15.Final
2025-06-08 23:44:45 - HHH000026: Second-level cache disabled
2025-06-08 23:44:45 - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-08 23:44:45 - HikariPool-1 - Starting...
2025-06-08 23:44:45 - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2025-06-08 23:44:45 - HikariPool-1 - Start completed.
2025-06-08 23:44:45 - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-08 23:44:45 - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 2.3.232
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-08 23:44:45 - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-08 23:44:45 - 
    drop table if exists accounts cascade 
Hibernate: 
    drop table if exists accounts cascade 
2025-06-08 23:44:45 - 
    drop table if exists journal_entry cascade 
Hibernate: 
    drop table if exists journal_entry cascade 
2025-06-08 23:44:45 - 
    drop table if exists transactions cascade 
Hibernate: 
    drop table if exists transactions cascade 
2025-06-08 23:44:45 - 
    create table accounts (
        balance numeric(19,2) not null,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        version bigint,
        account_name varchar(255) not null,
        account_number varchar(255) not null unique,
        account_type enum ('ASSET','EQUITY','EXPENSE','LIABILITY','REVENUE') not null,
        primary key (id)
    )
Hibernate: 
    create table accounts (
        balance numeric(19,2) not null,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        version bigint,
        account_name varchar(255) not null,
        account_number varchar(255) not null unique,
        account_type enum ('ASSET','EQUITY','EXPENSE','LIABILITY','REVENUE') not null,
        primary key (id)
    )
2025-06-08 23:44:45 - 
    create table journal_entry (
        credit_amount numeric(38,2),
        debit_amount numeric(38,2),
        account_id bigint not null,
        id bigint generated by default as identity,
        timestamp timestamp(6),
        transaction_id bigint not null,
        description varchar(255),
        primary key (id)
    )
Hibernate: 
    create table journal_entry (
        credit_amount numeric(38,2),
        debit_amount numeric(38,2),
        account_id bigint not null,
        id bigint generated by default as identity,
        timestamp timestamp(6),
        transaction_id bigint not null,
        description varchar(255),
        primary key (id)
    )
2025-06-08 23:44:45 - 
    create table transactions (
        amount numeric(38,2) not null,
        from_account_id bigint not null,
        id bigint generated by default as identity,
        timestamp timestamp(6) not null,
        to_account_id bigint not null,
        description varchar(255) not null,
        reference_id varchar(255) not null unique,
        primary key (id)
    )
Hibernate: 
    create table transactions (
        amount numeric(38,2) not null,
        from_account_id bigint not null,
        id bigint generated by default as identity,
        timestamp timestamp(6) not null,
        to_account_id bigint not null,
        description varchar(255) not null,
        reference_id varchar(255) not null unique,
        primary key (id)
    )
2025-06-08 23:44:45 - 
    alter table if exists journal_entry 
       add constraint FKhywmoag9j2ko4j4p50vh71ac7 
       foreign key (account_id) 
       references accounts
Hibernate: 
    alter table if exists journal_entry 
       add constraint FKhywmoag9j2ko4j4p50vh71ac7 
       foreign key (account_id) 
       references accounts
2025-06-08 23:44:45 - 
    alter table if exists journal_entry 
       add constraint FKgoiv5ivl6por3c8owvwho2mba 
       foreign key (transaction_id) 
       references transactions
Hibernate: 
    alter table if exists journal_entry 
       add constraint FKgoiv5ivl6por3c8owvwho2mba 
       foreign key (transaction_id) 
       references transactions
2025-06-08 23:44:45 - 
    alter table if exists transactions 
       add constraint FK7i7kboanveneetad7jyhbr0a7 
       foreign key (from_account_id) 
       references accounts
Hibernate: 
    alter table if exists transactions 
       add constraint FK7i7kboanveneetad7jyhbr0a7 
       foreign key (from_account_id) 
       references accounts
2025-06-08 23:44:45 - 
    alter table if exists transactions 
       add constraint FKra0an432c5wjo76mojluk0v28 
       foreign key (to_account_id) 
       references accounts
Hibernate: 
    alter table if exists transactions 
       add constraint FKra0an432c5wjo76mojluk0v28 
       foreign key (to_account_id) 
       references accounts
2025-06-08 23:44:45 - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-08 23:44:45 - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-08 23:44:46 - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-08 23:44:46 - 8 mappings in 'requestMappingHandlerMapping'
2025-06-08 23:44:46 - Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2025-06-08 23:44:46 - ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-06-08 23:44:46 - ControllerAdvice beans: 1 @ExceptionHandler, 1 ResponseBodyAdvice
2025-06-08 23:44:46 - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
2025-06-08 23:44:46 - Tomcat started on port 58912 (http) with context path '/'
2025-06-08 23:44:46 - Started ApiIntegrationTest in 2.19 seconds (process running for 2.517)
2025-06-08 23:44:46 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 0, missCount = 1, failureCount = 0]
2025-06-08 23:44:46 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 1, missCount = 1, failureCount = 0]
2025-06-08 23:44:46 - Before test method: class [ApiIntegrationTest], method [testBatchTransfer_SuccessAndIdempotency], class annotated with @DirtiesContext [false] with mode [null], method annotated with @DirtiesContext [false] with mode [null]
2025-06-08 23:44:46 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 2, missCount = 1, failureCount = 0]
2025-06-08 23:44:46 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 3, missCount = 1, failureCount = 0]
2025-06-08 23:44:46 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 4, missCount = 1, failureCount = 0]
2025-06-08 23:44:46 - 
    select
        je1_0.id,
        je1_0.account_id,
        je1_0.credit_amount,
        je1_0.debit_amount,
        je1_0.description,
        je1_0.timestamp,
        je1_0.transaction_id 
    from
        journal_entry je1_0
Hibernate: 
    select
        je1_0.id,
        je1_0.account_id,
        je1_0.credit_amount,
        je1_0.debit_amount,
        je1_0.description,
        je1_0.timestamp,
        je1_0.transaction_id 
    from
        journal_entry je1_0
2025-06-08 23:44:46 - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.description,
        t1_0.from_account_id,
        t1_0.reference_id,
        t1_0.timestamp,
        t1_0.to_account_id 
    from
        transactions t1_0
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.description,
        t1_0.from_account_id,
        t1_0.reference_id,
        t1_0.timestamp,
        t1_0.to_account_id 
    from
        transactions t1_0
2025-06-08 23:44:46 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0
2025-06-08 23:44:46 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 5, missCount = 1, failureCount = 0]
2025-06-08 23:44:46 - HTTP POST http://localhost:58912/api/ledger/accounts
2025-06-08 23:44:46 - Accept=[application/json, application/*+json]
2025-06-08 23:44:46 - Writing [Account(id=null, accountNumber=ACC_BATCH_1, accountName=Test Account ACC_BATCH_1, balance=2000.00, accountType=ASSET, createdAt=null, updatedAt=null, version=null)] with org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
2025-06-08 23:44:46 - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-08 23:44:46 - Initializing Servlet 'dispatcherServlet'
2025-06-08 23:44:46 - Detected StandardServletMultipartResolver
2025-06-08 23:44:46 - Detected AcceptHeaderLocaleResolver
2025-06-08 23:44:46 - Detected FixedThemeResolver
2025-06-08 23:44:46 - Detected org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@66abb7d4
2025-06-08 23:44:46 - Detected org.springframework.web.servlet.support.SessionFlashMapManager@10ac5a14
2025-06-08 23:44:46 - enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
2025-06-08 23:44:46 - Completed initialization in 1 ms
2025-06-08 23:44:46 - POST "/api/ledger/accounts", parameters={}
2025-06-08 23:44:46 - Mapped to com.example.ledger.controller.LedgerController#createAccount(Account)
2025-06-08 23:44:46 - Read "application/json;charset=UTF-8" to [Account(id=null, accountNumber=ACC_BATCH_1, accountName=Test Account ACC_BATCH_1, balance=2000.00, a (truncated)...]
2025-06-08 23:44:46 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:46 - 
    insert 
    into
        accounts
        (account_name, account_number, account_type, balance, created_at, updated_at, version, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        accounts
        (account_name, account_number, account_type, balance, created_at, updated_at, version, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-06-08 23:44:46 - Using 'application/json', given [application/json, application/*+json] and supported [*/*]
2025-06-08 23:44:46 - Completed 200 OK
2025-06-08 23:44:46 - Response 200 OK
2025-06-08 23:44:46 - HTTP POST http://localhost:58912/api/ledger/accounts
2025-06-08 23:44:46 - Accept=[application/json, application/*+json]
2025-06-08 23:44:46 - Writing [Account(id=null, accountNumber=ACC_BATCH_2, accountName=Test Account ACC_BATCH_2, balance=1000.00, accountType=ASSET, createdAt=null, updatedAt=null, version=null)] with org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
2025-06-08 23:44:46 - POST "/api/ledger/accounts", parameters={}
2025-06-08 23:44:46 - Mapped to com.example.ledger.controller.LedgerController#createAccount(Account)
2025-06-08 23:44:46 - Read "application/json;charset=UTF-8" to [Account(id=null, accountNumber=ACC_BATCH_2, accountName=Test Account ACC_BATCH_2, balance=1000.00, a (truncated)...]
2025-06-08 23:44:46 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:46 - 
    insert 
    into
        accounts
        (account_name, account_number, account_type, balance, created_at, updated_at, version, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        accounts
        (account_name, account_number, account_type, balance, created_at, updated_at, version, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-06-08 23:44:46 - Using 'application/json', given [application/json, application/*+json] and supported [*/*]
2025-06-08 23:44:46 - Completed 200 OK
2025-06-08 23:44:46 - Response 200 OK
2025-06-08 23:44:46 - HTTP POST http://localhost:58912/api/ledger/accounts
2025-06-08 23:44:46 - Accept=[application/json, application/*+json]
2025-06-08 23:44:46 - Writing [Account(id=null, accountNumber=ACC_BATCH_3, accountName=Test Account ACC_BATCH_3, balance=500.00, accountType=ASSET, createdAt=null, updatedAt=null, version=null)] with org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
2025-06-08 23:44:46 - POST "/api/ledger/accounts", parameters={}
2025-06-08 23:44:46 - Mapped to com.example.ledger.controller.LedgerController#createAccount(Account)
2025-06-08 23:44:46 - Read "application/json;charset=UTF-8" to [Account(id=null, accountNumber=ACC_BATCH_3, accountName=Test Account ACC_BATCH_3, balance=500.00, ac (truncated)...]
2025-06-08 23:44:46 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:46 - 
    insert 
    into
        accounts
        (account_name, account_number, account_type, balance, created_at, updated_at, version, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        accounts
        (account_name, account_number, account_type, balance, created_at, updated_at, version, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-06-08 23:44:46 - Using 'application/json', given [application/json, application/*+json] and supported [*/*]
2025-06-08 23:44:46 - Completed 200 OK
2025-06-08 23:44:46 - Response 200 OK
2025-06-08 23:44:46 - HTTP POST http://localhost:58912/api/ledger/batch-transfer
2025-06-08 23:44:46 - Accept=[application/json, application/*+json]
2025-06-08 23:44:46 - Writing [[Lcom.example.ledger.dto.TransferRequest;@a3a54d6] with org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
2025-06-08 23:44:46 - POST "/api/ledger/batch-transfer", parameters={}
2025-06-08 23:44:46 - Mapped to com.example.ledger.controller.LedgerController#executeBatchTransfer(TransferRequest[])
2025-06-08 23:44:46 - Read "application/json;charset=UTF-8" to [{TransferRequest(fromAccountNumber=ACC_BATCH_1, toAccountNumber=ACC_BATCH_2, amount=300.00, descript (truncated)...]
2025-06-08 23:44:46 - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.description,
        t1_0.from_account_id,
        t1_0.reference_id,
        t1_0.timestamp,
        t1_0.to_account_id 
    from
        transactions t1_0 
    where
        t1_0.reference_id=?
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.description,
        t1_0.from_account_id,
        t1_0.reference_id,
        t1_0.timestamp,
        t1_0.to_account_id 
    from
        transactions t1_0 
    where
        t1_0.reference_id=?
2025-06-08 23:44:46 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:46 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:46 - 
    insert 
    into
        transactions
        (amount, description, from_account_id, reference_id, timestamp, to_account_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        transactions
        (amount, description, from_account_id, reference_id, timestamp, to_account_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-06-08 23:44:46 - 
    insert 
    into
        journal_entry
        (account_id, credit_amount, debit_amount, description, timestamp, transaction_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        journal_entry
        (account_id, credit_amount, debit_amount, description, timestamp, transaction_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-06-08 23:44:46 - 
    insert 
    into
        journal_entry
        (account_id, credit_amount, debit_amount, description, timestamp, transaction_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        journal_entry
        (account_id, credit_amount, debit_amount, description, timestamp, transaction_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-06-08 23:44:46 - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.description,
        t1_0.from_account_id,
        t1_0.reference_id,
        t1_0.timestamp,
        t1_0.to_account_id 
    from
        transactions t1_0 
    where
        t1_0.reference_id=?
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.description,
        t1_0.from_account_id,
        t1_0.reference_id,
        t1_0.timestamp,
        t1_0.to_account_id 
    from
        transactions t1_0 
    where
        t1_0.reference_id=?
2025-06-08 23:44:46 - 
    update
        accounts 
    set
        account_name=?,
        account_number=?,
        account_type=?,
        balance=?,
        created_at=?,
        updated_at=?,
        version=? 
    where
        id=? 
        and version=?
Hibernate: 
    update
        accounts 
    set
        account_name=?,
        account_number=?,
        account_type=?,
        balance=?,
        created_at=?,
        updated_at=?,
        version=? 
    where
        id=? 
        and version=?
2025-06-08 23:44:46 - 
    update
        accounts 
    set
        account_name=?,
        account_number=?,
        account_type=?,
        balance=?,
        created_at=?,
        updated_at=?,
        version=? 
    where
        id=? 
        and version=?
Hibernate: 
    update
        accounts 
    set
        account_name=?,
        account_number=?,
        account_type=?,
        balance=?,
        created_at=?,
        updated_at=?,
        version=? 
    where
        id=? 
        and version=?
2025-06-08 23:44:46 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:46 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:46 - 
    insert 
    into
        transactions
        (amount, description, from_account_id, reference_id, timestamp, to_account_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        transactions
        (amount, description, from_account_id, reference_id, timestamp, to_account_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-06-08 23:44:46 - 
    insert 
    into
        journal_entry
        (account_id, credit_amount, debit_amount, description, timestamp, transaction_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        journal_entry
        (account_id, credit_amount, debit_amount, description, timestamp, transaction_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-06-08 23:44:46 - 
    insert 
    into
        journal_entry
        (account_id, credit_amount, debit_amount, description, timestamp, transaction_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        journal_entry
        (account_id, credit_amount, debit_amount, description, timestamp, transaction_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-06-08 23:44:46 - 
    update
        accounts 
    set
        account_name=?,
        account_number=?,
        account_type=?,
        balance=?,
        created_at=?,
        updated_at=?,
        version=? 
    where
        id=? 
        and version=?
Hibernate: 
    update
        accounts 
    set
        account_name=?,
        account_number=?,
        account_type=?,
        balance=?,
        created_at=?,
        updated_at=?,
        version=? 
    where
        id=? 
        and version=?
2025-06-08 23:44:46 - 
    update
        accounts 
    set
        account_name=?,
        account_number=?,
        account_type=?,
        balance=?,
        created_at=?,
        updated_at=?,
        version=? 
    where
        id=? 
        and version=?
Hibernate: 
    update
        accounts 
    set
        account_name=?,
        account_number=?,
        account_type=?,
        balance=?,
        created_at=?,
        updated_at=?,
        version=? 
    where
        id=? 
        and version=?
2025-06-08 23:44:46 - Using 'application/json', given [application/json, application/*+json] and supported [*/*]
2025-06-08 23:44:46 - Completed 200 OK
2025-06-08 23:44:46 - Response 200 OK
2025-06-08 23:44:46 - HTTP GET http://localhost:58912/api/ledger/accounts/ACC_BATCH_1
2025-06-08 23:44:46 - Accept=[application/json, application/*+json]
2025-06-08 23:44:46 - GET "/api/ledger/accounts/ACC_BATCH_1", parameters={}
2025-06-08 23:44:46 - Mapped to com.example.ledger.controller.LedgerController#getAccount(String)
2025-06-08 23:44:46 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:46 - Using 'application/json', given [application/json, application/*+json] and supported [application/json, application/*+json]
2025-06-08 23:44:46 - Writing [AccountResponse(accountNumber=ACC_BATCH_1, accountName=Test Account ACC_BATCH_1, balance=1700.00, ac (truncated)...]
2025-06-08 23:44:46 - Completed 200 OK
2025-06-08 23:44:46 - Response 200 OK
2025-06-08 23:44:46 - Reading to [com.example.ledger.dto.AccountResponse]
2025-06-08 23:44:46 - HTTP GET http://localhost:58912/api/ledger/accounts/ACC_BATCH_2
2025-06-08 23:44:46 - Accept=[application/json, application/*+json]
2025-06-08 23:44:46 - GET "/api/ledger/accounts/ACC_BATCH_2", parameters={}
2025-06-08 23:44:46 - Mapped to com.example.ledger.controller.LedgerController#getAccount(String)
2025-06-08 23:44:46 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:46 - Using 'application/json', given [application/json, application/*+json] and supported [application/json, application/*+json]
2025-06-08 23:44:46 - Writing [AccountResponse(accountNumber=ACC_BATCH_2, accountName=Test Account ACC_BATCH_2, balance=900.00, acc (truncated)...]
2025-06-08 23:44:46 - Completed 200 OK
2025-06-08 23:44:46 - Response 200 OK
2025-06-08 23:44:46 - Reading to [com.example.ledger.dto.AccountResponse]
2025-06-08 23:44:46 - HTTP GET http://localhost:58912/api/ledger/accounts/ACC_BATCH_3
2025-06-08 23:44:46 - Accept=[application/json, application/*+json]
2025-06-08 23:44:46 - GET "/api/ledger/accounts/ACC_BATCH_3", parameters={}
2025-06-08 23:44:46 - Mapped to com.example.ledger.controller.LedgerController#getAccount(String)
2025-06-08 23:44:46 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:46 - Using 'application/json', given [application/json, application/*+json] and supported [application/json, application/*+json]
2025-06-08 23:44:46 - Writing [AccountResponse(accountNumber=ACC_BATCH_3, accountName=Test Account ACC_BATCH_3, balance=900.00, acc (truncated)...]
2025-06-08 23:44:46 - Completed 200 OK
2025-06-08 23:44:46 - Response 200 OK
2025-06-08 23:44:46 - Reading to [com.example.ledger.dto.AccountResponse]
2025-06-08 23:44:47 - 
    select
        count(*) 
    from
        transactions t1_0
Hibernate: 
    select
        count(*) 
    from
        transactions t1_0
2025-06-08 23:44:47 - 
    select
        count(*) 
    from
        journal_entry je1_0
Hibernate: 
    select
        count(*) 
    from
        journal_entry je1_0
2025-06-08 23:44:47 - HTTP POST http://localhost:58912/api/ledger/batch-transfer
2025-06-08 23:44:47 - Accept=[text/plain, application/json, application/*+json, */*]
2025-06-08 23:44:47 - Writing [[Lcom.example.ledger.dto.TransferRequest;@a3a54d6] with org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
2025-06-08 23:44:47 - POST "/api/ledger/batch-transfer", parameters={}
2025-06-08 23:44:47 - Mapped to com.example.ledger.controller.LedgerController#executeBatchTransfer(TransferRequest[])
2025-06-08 23:44:47 - Read "application/json;charset=UTF-8" to [{TransferRequest(fromAccountNumber=ACC_BATCH_1, toAccountNumber=ACC_BATCH_2, amount=300.00, descript (truncated)...]
2025-06-08 23:44:47 - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.description,
        t1_0.from_account_id,
        t1_0.reference_id,
        t1_0.timestamp,
        t1_0.to_account_id 
    from
        transactions t1_0 
    where
        t1_0.reference_id=?
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.description,
        t1_0.from_account_id,
        t1_0.reference_id,
        t1_0.timestamp,
        t1_0.to_account_id 
    from
        transactions t1_0 
    where
        t1_0.reference_id=?
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.id=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.id=?
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.id=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.id=?
2025-06-08 23:44:47 - Using @ExceptionHandler com.example.ledger.exception.RestExceptionHandler#handleDuplicateTransaction(DuplicateTransactionException, WebRequest)
2025-06-08 23:44:47 - Using 'application/json', given [text/plain, application/json, application/*+json, */*] and supported [application/json, application/*+json]
2025-06-08 23:44:47 - Writing [{error=Transaction with this reference ID already exists}]
2025-06-08 23:44:47 - Resolved [com.example.ledger.exception.DuplicateTransactionException: Transaction with this reference ID already exists]
2025-06-08 23:44:47 - Completed 400 BAD_REQUEST
2025-06-08 23:44:47 - Response 400 BAD_REQUEST
2025-06-08 23:44:47 - Reading to [java.lang.String] as "application/json"
2025-06-08 23:44:47 - HTTP GET http://localhost:58912/api/ledger/accounts/ACC_BATCH_1
2025-06-08 23:44:47 - Accept=[application/json, application/*+json]
2025-06-08 23:44:47 - GET "/api/ledger/accounts/ACC_BATCH_1", parameters={}
2025-06-08 23:44:47 - Mapped to com.example.ledger.controller.LedgerController#getAccount(String)
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:47 - Using 'application/json', given [application/json, application/*+json] and supported [application/json, application/*+json]
2025-06-08 23:44:47 - Writing [AccountResponse(accountNumber=ACC_BATCH_1, accountName=Test Account ACC_BATCH_1, balance=1700.00, ac (truncated)...]
2025-06-08 23:44:47 - Completed 200 OK
2025-06-08 23:44:47 - Response 200 OK
2025-06-08 23:44:47 - Reading to [com.example.ledger.dto.AccountResponse]
2025-06-08 23:44:47 - HTTP GET http://localhost:58912/api/ledger/accounts/ACC_BATCH_2
2025-06-08 23:44:47 - Accept=[application/json, application/*+json]
2025-06-08 23:44:47 - GET "/api/ledger/accounts/ACC_BATCH_2", parameters={}
2025-06-08 23:44:47 - Mapped to com.example.ledger.controller.LedgerController#getAccount(String)
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:47 - Using 'application/json', given [application/json, application/*+json] and supported [application/json, application/*+json]
2025-06-08 23:44:47 - Writing [AccountResponse(accountNumber=ACC_BATCH_2, accountName=Test Account ACC_BATCH_2, balance=900.00, acc (truncated)...]
2025-06-08 23:44:47 - Completed 200 OK
2025-06-08 23:44:47 - Response 200 OK
2025-06-08 23:44:47 - Reading to [com.example.ledger.dto.AccountResponse]
2025-06-08 23:44:47 - HTTP GET http://localhost:58912/api/ledger/accounts/ACC_BATCH_3
2025-06-08 23:44:47 - Accept=[application/json, application/*+json]
2025-06-08 23:44:47 - GET "/api/ledger/accounts/ACC_BATCH_3", parameters={}
2025-06-08 23:44:47 - Mapped to com.example.ledger.controller.LedgerController#getAccount(String)
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:47 - Using 'application/json', given [application/json, application/*+json] and supported [application/json, application/*+json]
2025-06-08 23:44:47 - Writing [AccountResponse(accountNumber=ACC_BATCH_3, accountName=Test Account ACC_BATCH_3, balance=900.00, acc (truncated)...]
2025-06-08 23:44:47 - Completed 200 OK
2025-06-08 23:44:47 - Response 200 OK
2025-06-08 23:44:47 - Reading to [com.example.ledger.dto.AccountResponse]
2025-06-08 23:44:47 - 
    select
        count(*) 
    from
        transactions t1_0
Hibernate: 
    select
        count(*) 
    from
        transactions t1_0
2025-06-08 23:44:47 - 
    select
        count(*) 
    from
        journal_entry je1_0
Hibernate: 
    select
        count(*) 
    from
        journal_entry je1_0
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 6, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 7, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 8, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 9, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 10, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 11, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 12, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - After test method: class [ApiIntegrationTest], method [testBatchTransfer_SuccessAndIdempotency], class annotated with @DirtiesContext [false] with mode [null], method annotated with @DirtiesContext [false] with mode [null]
]]></system-out>
    <system-err><![CDATA[Mockito is currently self-attaching to enable the inline-mock-maker. This will no longer work in future releases of the JDK. Please add Mockito as an agent to your build what is described in Mockito's documentation: https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#0.3
WARNING: A Java agent has been loaded dynamically (/Users/tomma/.m2/repository/net/bytebuddy/byte-buddy-agent/1.15.11/byte-buddy-agent-1.15.11.jar)
WARNING: If a serviceability tool is in use, please run with -XX:+EnableDynamicAgentLoading to hide this warning
WARNING: If a serviceability tool is not in use, please run with -Djdk.instrument.traceUsage for more information
WARNING: Dynamic loading of agents will be disallowed by default in a future release
]]></system-err>
  </testcase>
  <testcase name="testTransfer_SuccessAndIdempotency" classname="com.example.ledger.integration.ApiIntegrationTest" time="0.052">
    <system-out><![CDATA[2025-06-08 23:44:47 - Performing dependency injection for test class com.example.ledger.integration.ApiIntegrationTest
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 13, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 14, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Before test method: class [ApiIntegrationTest], method [testTransfer_SuccessAndIdempotency], class annotated with @DirtiesContext [false] with mode [null], method annotated with @DirtiesContext [false] with mode [null]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 15, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 16, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 17, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - 
    select
        je1_0.id,
        je1_0.account_id,
        je1_0.credit_amount,
        je1_0.debit_amount,
        je1_0.description,
        je1_0.timestamp,
        je1_0.transaction_id 
    from
        journal_entry je1_0
Hibernate: 
    select
        je1_0.id,
        je1_0.account_id,
        je1_0.credit_amount,
        je1_0.debit_amount,
        je1_0.description,
        je1_0.timestamp,
        je1_0.transaction_id 
    from
        journal_entry je1_0
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.id=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.id=?
2025-06-08 23:44:47 - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.description,
        t1_0.from_account_id,
        fa1_0.id,
        fa1_0.account_name,
        fa1_0.account_number,
        fa1_0.account_type,
        fa1_0.balance,
        fa1_0.created_at,
        fa1_0.updated_at,
        fa1_0.version,
        t1_0.reference_id,
        t1_0.timestamp,
        t1_0.to_account_id,
        ta1_0.id,
        ta1_0.account_name,
        ta1_0.account_number,
        ta1_0.account_type,
        ta1_0.balance,
        ta1_0.created_at,
        ta1_0.updated_at,
        ta1_0.version 
    from
        transactions t1_0 
    join
        accounts fa1_0 
            on fa1_0.id=t1_0.from_account_id 
    join
        accounts ta1_0 
            on ta1_0.id=t1_0.to_account_id 
    where
        t1_0.id=?
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.description,
        t1_0.from_account_id,
        fa1_0.id,
        fa1_0.account_name,
        fa1_0.account_number,
        fa1_0.account_type,
        fa1_0.balance,
        fa1_0.created_at,
        fa1_0.updated_at,
        fa1_0.version,
        t1_0.reference_id,
        t1_0.timestamp,
        t1_0.to_account_id,
        ta1_0.id,
        ta1_0.account_name,
        ta1_0.account_number,
        ta1_0.account_type,
        ta1_0.balance,
        ta1_0.created_at,
        ta1_0.updated_at,
        ta1_0.version 
    from
        transactions t1_0 
    join
        accounts fa1_0 
            on fa1_0.id=t1_0.from_account_id 
    join
        accounts ta1_0 
            on ta1_0.id=t1_0.to_account_id 
    where
        t1_0.id=?
2025-06-08 23:44:47 - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.description,
        t1_0.from_account_id,
        fa1_0.id,
        fa1_0.account_name,
        fa1_0.account_number,
        fa1_0.account_type,
        fa1_0.balance,
        fa1_0.created_at,
        fa1_0.updated_at,
        fa1_0.version,
        t1_0.reference_id,
        t1_0.timestamp,
        t1_0.to_account_id,
        ta1_0.id,
        ta1_0.account_name,
        ta1_0.account_number,
        ta1_0.account_type,
        ta1_0.balance,
        ta1_0.created_at,
        ta1_0.updated_at,
        ta1_0.version 
    from
        transactions t1_0 
    join
        accounts fa1_0 
            on fa1_0.id=t1_0.from_account_id 
    join
        accounts ta1_0 
            on ta1_0.id=t1_0.to_account_id 
    where
        t1_0.id=?
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.description,
        t1_0.from_account_id,
        fa1_0.id,
        fa1_0.account_name,
        fa1_0.account_number,
        fa1_0.account_type,
        fa1_0.balance,
        fa1_0.created_at,
        fa1_0.updated_at,
        fa1_0.version,
        t1_0.reference_id,
        t1_0.timestamp,
        t1_0.to_account_id,
        ta1_0.id,
        ta1_0.account_name,
        ta1_0.account_number,
        ta1_0.account_type,
        ta1_0.balance,
        ta1_0.created_at,
        ta1_0.updated_at,
        ta1_0.version 
    from
        transactions t1_0 
    join
        accounts fa1_0 
            on fa1_0.id=t1_0.from_account_id 
    join
        accounts ta1_0 
            on ta1_0.id=t1_0.to_account_id 
    where
        t1_0.id=?
2025-06-08 23:44:47 - 
    delete 
    from
        journal_entry 
    where
        id=?
Hibernate: 
    delete 
    from
        journal_entry 
    where
        id=?
2025-06-08 23:44:47 - 
    delete 
    from
        journal_entry 
    where
        id=?
Hibernate: 
    delete 
    from
        journal_entry 
    where
        id=?
2025-06-08 23:44:47 - 
    delete 
    from
        journal_entry 
    where
        id=?
Hibernate: 
    delete 
    from
        journal_entry 
    where
        id=?
2025-06-08 23:44:47 - 
    delete 
    from
        journal_entry 
    where
        id=?
Hibernate: 
    delete 
    from
        journal_entry 
    where
        id=?
2025-06-08 23:44:47 - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.description,
        t1_0.from_account_id,
        t1_0.reference_id,
        t1_0.timestamp,
        t1_0.to_account_id 
    from
        transactions t1_0
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.description,
        t1_0.from_account_id,
        t1_0.reference_id,
        t1_0.timestamp,
        t1_0.to_account_id 
    from
        transactions t1_0
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.id=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.id=?
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.id=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.id=?
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.id=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.id=?
2025-06-08 23:44:47 - 
    delete 
    from
        transactions 
    where
        id=?
Hibernate: 
    delete 
    from
        transactions 
    where
        id=?
2025-06-08 23:44:47 - 
    delete 
    from
        transactions 
    where
        id=?
Hibernate: 
    delete 
    from
        transactions 
    where
        id=?
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0
2025-06-08 23:44:47 - 
    delete 
    from
        accounts 
    where
        id=? 
        and version=?
Hibernate: 
    delete 
    from
        accounts 
    where
        id=? 
        and version=?
2025-06-08 23:44:47 - 
    delete 
    from
        accounts 
    where
        id=? 
        and version=?
Hibernate: 
    delete 
    from
        accounts 
    where
        id=? 
        and version=?
2025-06-08 23:44:47 - 
    delete 
    from
        accounts 
    where
        id=? 
        and version=?
Hibernate: 
    delete 
    from
        accounts 
    where
        id=? 
        and version=?
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 18, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - HTTP POST http://localhost:58912/api/ledger/accounts
2025-06-08 23:44:47 - Accept=[application/json, application/*+json]
2025-06-08 23:44:47 - Writing [Account(id=null, accountNumber=ACC_SRC_1, accountName=Test Account ACC_SRC_1, balance=1000.00, accountType=ASSET, createdAt=null, updatedAt=null, version=null)] with org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
2025-06-08 23:44:47 - POST "/api/ledger/accounts", parameters={}
2025-06-08 23:44:47 - Mapped to com.example.ledger.controller.LedgerController#createAccount(Account)
2025-06-08 23:44:47 - Read "application/json;charset=UTF-8" to [Account(id=null, accountNumber=ACC_SRC_1, accountName=Test Account ACC_SRC_1, balance=1000.00, accou (truncated)...]
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:47 - 
    insert 
    into
        accounts
        (account_name, account_number, account_type, balance, created_at, updated_at, version, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        accounts
        (account_name, account_number, account_type, balance, created_at, updated_at, version, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-06-08 23:44:47 - Using 'application/json', given [application/json, application/*+json] and supported [*/*]
2025-06-08 23:44:47 - Completed 200 OK
2025-06-08 23:44:47 - Response 200 OK
2025-06-08 23:44:47 - HTTP POST http://localhost:58912/api/ledger/accounts
2025-06-08 23:44:47 - Accept=[application/json, application/*+json]
2025-06-08 23:44:47 - Writing [Account(id=null, accountNumber=ACC_DST_1, accountName=Test Account ACC_DST_1, balance=500.00, accountType=ASSET, createdAt=null, updatedAt=null, version=null)] with org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
2025-06-08 23:44:47 - POST "/api/ledger/accounts", parameters={}
2025-06-08 23:44:47 - Mapped to com.example.ledger.controller.LedgerController#createAccount(Account)
2025-06-08 23:44:47 - Read "application/json;charset=UTF-8" to [Account(id=null, accountNumber=ACC_DST_1, accountName=Test Account ACC_DST_1, balance=500.00, accoun (truncated)...]
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:47 - 
    insert 
    into
        accounts
        (account_name, account_number, account_type, balance, created_at, updated_at, version, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        accounts
        (account_name, account_number, account_type, balance, created_at, updated_at, version, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-06-08 23:44:47 - Using 'application/json', given [application/json, application/*+json] and supported [*/*]
2025-06-08 23:44:47 - Completed 200 OK
2025-06-08 23:44:47 - Response 200 OK
2025-06-08 23:44:47 - HTTP POST http://localhost:58912/api/ledger/transfer
2025-06-08 23:44:47 - Accept=[application/json, application/*+json]
2025-06-08 23:44:47 - Writing [TransferRequest(fromAccountNumber=ACC_SRC_1, toAccountNumber=ACC_DST_1, amount=200.00, description=Idempotent Transfer, referenceId=7ebea52e-58a8-4548-8d8f-cdb21fa3334a)] with org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
2025-06-08 23:44:47 - POST "/api/ledger/transfer", parameters={}
2025-06-08 23:44:47 - Mapped to com.example.ledger.controller.LedgerController#executeTransfer(TransferRequest)
2025-06-08 23:44:47 - Read "application/json;charset=UTF-8" to [TransferRequest(fromAccountNumber=ACC_SRC_1, toAccountNumber=ACC_DST_1, amount=200.00, description=I (truncated)...]
2025-06-08 23:44:47 - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.description,
        t1_0.from_account_id,
        t1_0.reference_id,
        t1_0.timestamp,
        t1_0.to_account_id 
    from
        transactions t1_0 
    where
        t1_0.reference_id=?
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.description,
        t1_0.from_account_id,
        t1_0.reference_id,
        t1_0.timestamp,
        t1_0.to_account_id 
    from
        transactions t1_0 
    where
        t1_0.reference_id=?
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:47 - 
    insert 
    into
        transactions
        (amount, description, from_account_id, reference_id, timestamp, to_account_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        transactions
        (amount, description, from_account_id, reference_id, timestamp, to_account_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-06-08 23:44:47 - 
    insert 
    into
        journal_entry
        (account_id, credit_amount, debit_amount, description, timestamp, transaction_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        journal_entry
        (account_id, credit_amount, debit_amount, description, timestamp, transaction_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-06-08 23:44:47 - 
    insert 
    into
        journal_entry
        (account_id, credit_amount, debit_amount, description, timestamp, transaction_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        journal_entry
        (account_id, credit_amount, debit_amount, description, timestamp, transaction_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
2025-06-08 23:44:47 - 
    update
        accounts 
    set
        account_name=?,
        account_number=?,
        account_type=?,
        balance=?,
        created_at=?,
        updated_at=?,
        version=? 
    where
        id=? 
        and version=?
Hibernate: 
    update
        accounts 
    set
        account_name=?,
        account_number=?,
        account_type=?,
        balance=?,
        created_at=?,
        updated_at=?,
        version=? 
    where
        id=? 
        and version=?
2025-06-08 23:44:47 - 
    update
        accounts 
    set
        account_name=?,
        account_number=?,
        account_type=?,
        balance=?,
        created_at=?,
        updated_at=?,
        version=? 
    where
        id=? 
        and version=?
Hibernate: 
    update
        accounts 
    set
        account_name=?,
        account_number=?,
        account_type=?,
        balance=?,
        created_at=?,
        updated_at=?,
        version=? 
    where
        id=? 
        and version=?
2025-06-08 23:44:47 - Using 'application/json', given [application/json, application/*+json] and supported [*/*]
2025-06-08 23:44:47 - Completed 200 OK
2025-06-08 23:44:47 - Response 200 OK
2025-06-08 23:44:47 - HTTP GET http://localhost:58912/api/ledger/accounts/ACC_SRC_1
2025-06-08 23:44:47 - Accept=[application/json, application/*+json]
2025-06-08 23:44:47 - GET "/api/ledger/accounts/ACC_SRC_1", parameters={}
2025-06-08 23:44:47 - Mapped to com.example.ledger.controller.LedgerController#getAccount(String)
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:47 - Using 'application/json', given [application/json, application/*+json] and supported [application/json, application/*+json]
2025-06-08 23:44:47 - Writing [AccountResponse(accountNumber=ACC_SRC_1, accountName=Test Account ACC_SRC_1, balance=800.00, account (truncated)...]
2025-06-08 23:44:47 - Completed 200 OK
2025-06-08 23:44:47 - Response 200 OK
2025-06-08 23:44:47 - Reading to [com.example.ledger.dto.AccountResponse]
2025-06-08 23:44:47 - HTTP GET http://localhost:58912/api/ledger/accounts/ACC_DST_1
2025-06-08 23:44:47 - Accept=[application/json, application/*+json]
2025-06-08 23:44:47 - GET "/api/ledger/accounts/ACC_DST_1", parameters={}
2025-06-08 23:44:47 - Mapped to com.example.ledger.controller.LedgerController#getAccount(String)
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:47 - Using 'application/json', given [application/json, application/*+json] and supported [application/json, application/*+json]
2025-06-08 23:44:47 - Writing [AccountResponse(accountNumber=ACC_DST_1, accountName=Test Account ACC_DST_1, balance=700.00, account (truncated)...]
2025-06-08 23:44:47 - Completed 200 OK
2025-06-08 23:44:47 - Response 200 OK
2025-06-08 23:44:47 - Reading to [com.example.ledger.dto.AccountResponse]
2025-06-08 23:44:47 - 
    select
        count(*) 
    from
        transactions t1_0
Hibernate: 
    select
        count(*) 
    from
        transactions t1_0
2025-06-08 23:44:47 - 
    select
        count(*) 
    from
        journal_entry je1_0
Hibernate: 
    select
        count(*) 
    from
        journal_entry je1_0
2025-06-08 23:44:47 - HTTP POST http://localhost:58912/api/ledger/transfer
2025-06-08 23:44:47 - Accept=[application/json, application/*+json]
2025-06-08 23:44:47 - Writing [TransferRequest(fromAccountNumber=ACC_SRC_1, toAccountNumber=ACC_DST_1, amount=200.00, description=Idempotent Transfer, referenceId=7ebea52e-58a8-4548-8d8f-cdb21fa3334a)] with org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
2025-06-08 23:44:47 - POST "/api/ledger/transfer", parameters={}
2025-06-08 23:44:47 - Mapped to com.example.ledger.controller.LedgerController#executeTransfer(TransferRequest)
2025-06-08 23:44:47 - Read "application/json;charset=UTF-8" to [TransferRequest(fromAccountNumber=ACC_SRC_1, toAccountNumber=ACC_DST_1, amount=200.00, description=I (truncated)...]
2025-06-08 23:44:47 - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.description,
        t1_0.from_account_id,
        t1_0.reference_id,
        t1_0.timestamp,
        t1_0.to_account_id 
    from
        transactions t1_0 
    where
        t1_0.reference_id=?
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.description,
        t1_0.from_account_id,
        t1_0.reference_id,
        t1_0.timestamp,
        t1_0.to_account_id 
    from
        transactions t1_0 
    where
        t1_0.reference_id=?
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.id=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.id=?
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.id=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.id=?
2025-06-08 23:44:47 - Using @ExceptionHandler com.example.ledger.exception.RestExceptionHandler#handleDuplicateTransaction(DuplicateTransactionException, WebRequest)
2025-06-08 23:44:47 - Using 'application/json', given [application/json, application/*+json] and supported [application/json, application/*+json]
2025-06-08 23:44:47 - Writing [{error=Transaction with this reference ID already exists}]
2025-06-08 23:44:47 - Resolved [com.example.ledger.exception.DuplicateTransactionException: Transaction with this reference ID already exists]
2025-06-08 23:44:47 - Completed 400 BAD_REQUEST
2025-06-08 23:44:47 - Response 400 BAD_REQUEST
2025-06-08 23:44:47 - Reading to [java.util.Map<?, ?>]
2025-06-08 23:44:47 - HTTP GET http://localhost:58912/api/ledger/accounts/ACC_SRC_1
2025-06-08 23:44:47 - Accept=[application/json, application/*+json]
2025-06-08 23:44:47 - GET "/api/ledger/accounts/ACC_SRC_1", parameters={}
2025-06-08 23:44:47 - Mapped to com.example.ledger.controller.LedgerController#getAccount(String)
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:47 - Using 'application/json', given [application/json, application/*+json] and supported [application/json, application/*+json]
2025-06-08 23:44:47 - Writing [AccountResponse(accountNumber=ACC_SRC_1, accountName=Test Account ACC_SRC_1, balance=800.00, account (truncated)...]
2025-06-08 23:44:47 - Completed 200 OK
2025-06-08 23:44:47 - Response 200 OK
2025-06-08 23:44:47 - Reading to [com.example.ledger.dto.AccountResponse]
2025-06-08 23:44:47 - HTTP GET http://localhost:58912/api/ledger/accounts/ACC_DST_1
2025-06-08 23:44:47 - Accept=[application/json, application/*+json]
2025-06-08 23:44:47 - GET "/api/ledger/accounts/ACC_DST_1", parameters={}
2025-06-08 23:44:47 - Mapped to com.example.ledger.controller.LedgerController#getAccount(String)
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:47 - Using 'application/json', given [application/json, application/*+json] and supported [application/json, application/*+json]
2025-06-08 23:44:47 - Writing [AccountResponse(accountNumber=ACC_DST_1, accountName=Test Account ACC_DST_1, balance=700.00, account (truncated)...]
2025-06-08 23:44:47 - Completed 200 OK
2025-06-08 23:44:47 - Response 200 OK
2025-06-08 23:44:47 - Reading to [com.example.ledger.dto.AccountResponse]
2025-06-08 23:44:47 - 
    select
        count(*) 
    from
        transactions t1_0
Hibernate: 
    select
        count(*) 
    from
        transactions t1_0
2025-06-08 23:44:47 - 
    select
        count(*) 
    from
        journal_entry je1_0
Hibernate: 
    select
        count(*) 
    from
        journal_entry je1_0
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 19, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 20, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 21, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 22, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 23, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 24, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 25, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - After test method: class [ApiIntegrationTest], method [testTransfer_SuccessAndIdempotency], class annotated with @DirtiesContext [false] with mode [null], method annotated with @DirtiesContext [false] with mode [null]
]]></system-out>
  </testcase>
  <testcase name="testGetAllAccounts" classname="com.example.ledger.integration.ApiIntegrationTest" time="0.026">
    <system-out><![CDATA[2025-06-08 23:44:47 - Performing dependency injection for test class com.example.ledger.integration.ApiIntegrationTest
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 26, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 27, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Before test method: class [ApiIntegrationTest], method [testGetAllAccounts], class annotated with @DirtiesContext [false] with mode [null], method annotated with @DirtiesContext [false] with mode [null]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 28, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 29, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 30, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - 
    select
        je1_0.id,
        je1_0.account_id,
        je1_0.credit_amount,
        je1_0.debit_amount,
        je1_0.description,
        je1_0.timestamp,
        je1_0.transaction_id 
    from
        journal_entry je1_0
Hibernate: 
    select
        je1_0.id,
        je1_0.account_id,
        je1_0.credit_amount,
        je1_0.debit_amount,
        je1_0.description,
        je1_0.timestamp,
        je1_0.transaction_id 
    from
        journal_entry je1_0
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.id=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.id=?
2025-06-08 23:44:47 - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.description,
        t1_0.from_account_id,
        fa1_0.id,
        fa1_0.account_name,
        fa1_0.account_number,
        fa1_0.account_type,
        fa1_0.balance,
        fa1_0.created_at,
        fa1_0.updated_at,
        fa1_0.version,
        t1_0.reference_id,
        t1_0.timestamp,
        t1_0.to_account_id,
        ta1_0.id,
        ta1_0.account_name,
        ta1_0.account_number,
        ta1_0.account_type,
        ta1_0.balance,
        ta1_0.created_at,
        ta1_0.updated_at,
        ta1_0.version 
    from
        transactions t1_0 
    join
        accounts fa1_0 
            on fa1_0.id=t1_0.from_account_id 
    join
        accounts ta1_0 
            on ta1_0.id=t1_0.to_account_id 
    where
        t1_0.id=?
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.description,
        t1_0.from_account_id,
        fa1_0.id,
        fa1_0.account_name,
        fa1_0.account_number,
        fa1_0.account_type,
        fa1_0.balance,
        fa1_0.created_at,
        fa1_0.updated_at,
        fa1_0.version,
        t1_0.reference_id,
        t1_0.timestamp,
        t1_0.to_account_id,
        ta1_0.id,
        ta1_0.account_name,
        ta1_0.account_number,
        ta1_0.account_type,
        ta1_0.balance,
        ta1_0.created_at,
        ta1_0.updated_at,
        ta1_0.version 
    from
        transactions t1_0 
    join
        accounts fa1_0 
            on fa1_0.id=t1_0.from_account_id 
    join
        accounts ta1_0 
            on ta1_0.id=t1_0.to_account_id 
    where
        t1_0.id=?
2025-06-08 23:44:47 - 
    delete 
    from
        journal_entry 
    where
        id=?
Hibernate: 
    delete 
    from
        journal_entry 
    where
        id=?
2025-06-08 23:44:47 - 
    delete 
    from
        journal_entry 
    where
        id=?
Hibernate: 
    delete 
    from
        journal_entry 
    where
        id=?
2025-06-08 23:44:47 - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.description,
        t1_0.from_account_id,
        t1_0.reference_id,
        t1_0.timestamp,
        t1_0.to_account_id 
    from
        transactions t1_0
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.description,
        t1_0.from_account_id,
        t1_0.reference_id,
        t1_0.timestamp,
        t1_0.to_account_id 
    from
        transactions t1_0
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.id=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.id=?
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.id=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.id=?
2025-06-08 23:44:47 - 
    delete 
    from
        transactions 
    where
        id=?
Hibernate: 
    delete 
    from
        transactions 
    where
        id=?
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0
2025-06-08 23:44:47 - 
    delete 
    from
        accounts 
    where
        id=? 
        and version=?
Hibernate: 
    delete 
    from
        accounts 
    where
        id=? 
        and version=?
2025-06-08 23:44:47 - 
    delete 
    from
        accounts 
    where
        id=? 
        and version=?
Hibernate: 
    delete 
    from
        accounts 
    where
        id=? 
        and version=?
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 31, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - HTTP POST http://localhost:58912/api/ledger/accounts
2025-06-08 23:44:47 - Accept=[application/json, application/*+json]
2025-06-08 23:44:47 - Writing [Account(id=null, accountNumber=ACC003, accountName=Account 3, balance=100.00, accountType=ASSET, createdAt=null, updatedAt=null, version=null)] with org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
2025-06-08 23:44:47 - POST "/api/ledger/accounts", parameters={}
2025-06-08 23:44:47 - Mapped to com.example.ledger.controller.LedgerController#createAccount(Account)
2025-06-08 23:44:47 - Read "application/json;charset=UTF-8" to [Account(id=null, accountNumber=ACC003, accountName=Account 3, balance=100.00, accountType=ASSET, cre (truncated)...]
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:47 - 
    insert 
    into
        accounts
        (account_name, account_number, account_type, balance, created_at, updated_at, version, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        accounts
        (account_name, account_number, account_type, balance, created_at, updated_at, version, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-06-08 23:44:47 - Using 'application/json', given [application/json, application/*+json] and supported [*/*]
2025-06-08 23:44:47 - Completed 200 OK
2025-06-08 23:44:47 - Response 200 OK
2025-06-08 23:44:47 - HTTP POST http://localhost:58912/api/ledger/accounts
2025-06-08 23:44:47 - Accept=[application/json, application/*+json]
2025-06-08 23:44:47 - Writing [Account(id=null, accountNumber=ACC004, accountName=Account 4, balance=200.00, accountType=ASSET, createdAt=null, updatedAt=null, version=null)] with org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
2025-06-08 23:44:47 - POST "/api/ledger/accounts", parameters={}
2025-06-08 23:44:47 - Mapped to com.example.ledger.controller.LedgerController#createAccount(Account)
2025-06-08 23:44:47 - Read "application/json;charset=UTF-8" to [Account(id=null, accountNumber=ACC004, accountName=Account 4, balance=200.00, accountType=ASSET, cre (truncated)...]
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:47 - 
    insert 
    into
        accounts
        (account_name, account_number, account_type, balance, created_at, updated_at, version, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        accounts
        (account_name, account_number, account_type, balance, created_at, updated_at, version, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-06-08 23:44:47 - Using 'application/json', given [application/json, application/*+json] and supported [*/*]
2025-06-08 23:44:47 - Completed 200 OK
2025-06-08 23:44:47 - Response 200 OK
2025-06-08 23:44:47 - HTTP GET http://localhost:58912/api/ledger/accounts
2025-06-08 23:44:47 - Accept=[application/json, application/*+json]
2025-06-08 23:44:47 - GET "/api/ledger/accounts", parameters={}
2025-06-08 23:44:47 - Mapped to com.example.ledger.controller.LedgerController#getAllAccounts()
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0
2025-06-08 23:44:47 - Using 'application/json', given [application/json, application/*+json] and supported [application/json, application/*+json]
2025-06-08 23:44:47 - Writing [[AccountResponse(accountNumber=ACC003, accountName=Account 3, balance=100.00, accountType=ASSET), Ac (truncated)...]
2025-06-08 23:44:47 - Completed 200 OK
2025-06-08 23:44:47 - Response 200 OK
2025-06-08 23:44:47 - Reading to [java.util.List<?>]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 32, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 33, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 34, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 35, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 36, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 37, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 38, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - After test method: class [ApiIntegrationTest], method [testGetAllAccounts], class annotated with @DirtiesContext [false] with mode [null], method annotated with @DirtiesContext [false] with mode [null]
]]></system-out>
  </testcase>
  <testcase name="testCreateAndGetAccount" classname="com.example.ledger.integration.ApiIntegrationTest" time="0.014">
    <system-out><![CDATA[2025-06-08 23:44:47 - Performing dependency injection for test class com.example.ledger.integration.ApiIntegrationTest
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 39, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 40, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Before test method: class [ApiIntegrationTest], method [testCreateAndGetAccount], class annotated with @DirtiesContext [false] with mode [null], method annotated with @DirtiesContext [false] with mode [null]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 41, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 42, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 43, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - 
    select
        je1_0.id,
        je1_0.account_id,
        je1_0.credit_amount,
        je1_0.debit_amount,
        je1_0.description,
        je1_0.timestamp,
        je1_0.transaction_id 
    from
        journal_entry je1_0
Hibernate: 
    select
        je1_0.id,
        je1_0.account_id,
        je1_0.credit_amount,
        je1_0.debit_amount,
        je1_0.description,
        je1_0.timestamp,
        je1_0.transaction_id 
    from
        journal_entry je1_0
2025-06-08 23:44:47 - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.description,
        t1_0.from_account_id,
        t1_0.reference_id,
        t1_0.timestamp,
        t1_0.to_account_id 
    from
        transactions t1_0
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.description,
        t1_0.from_account_id,
        t1_0.reference_id,
        t1_0.timestamp,
        t1_0.to_account_id 
    from
        transactions t1_0
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0
2025-06-08 23:44:47 - 
    delete 
    from
        accounts 
    where
        id=? 
        and version=?
Hibernate: 
    delete 
    from
        accounts 
    where
        id=? 
        and version=?
2025-06-08 23:44:47 - 
    delete 
    from
        accounts 
    where
        id=? 
        and version=?
Hibernate: 
    delete 
    from
        accounts 
    where
        id=? 
        and version=?
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 44, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - HTTP POST http://localhost:58912/api/ledger/accounts
2025-06-08 23:44:47 - Accept=[application/json, application/*+json]
2025-06-08 23:44:47 - Writing [Account(id=null, accountNumber=ACC001, accountName=Test Account, balance=1000.00, accountType=ASSET, createdAt=null, updatedAt=null, version=null)] with org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
2025-06-08 23:44:47 - POST "/api/ledger/accounts", parameters={}
2025-06-08 23:44:47 - Mapped to com.example.ledger.controller.LedgerController#createAccount(Account)
2025-06-08 23:44:47 - Read "application/json;charset=UTF-8" to [Account(id=null, accountNumber=ACC001, accountName=Test Account, balance=1000.00, accountType=ASSET, (truncated)...]
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:47 - 
    insert 
    into
        accounts
        (account_name, account_number, account_type, balance, created_at, updated_at, version, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        accounts
        (account_name, account_number, account_type, balance, created_at, updated_at, version, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-06-08 23:44:47 - Using 'application/json', given [application/json, application/*+json] and supported [*/*]
2025-06-08 23:44:47 - Completed 200 OK
2025-06-08 23:44:47 - Response 200 OK
2025-06-08 23:44:47 - HTTP GET http://localhost:58912/api/ledger/accounts/ACC001
2025-06-08 23:44:47 - Accept=[application/json, application/*+json]
2025-06-08 23:44:47 - GET "/api/ledger/accounts/ACC001", parameters={}
2025-06-08 23:44:47 - Mapped to com.example.ledger.controller.LedgerController#getAccount(String)
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:47 - Using 'application/json', given [application/json, application/*+json] and supported [application/json, application/*+json]
2025-06-08 23:44:47 - Writing [AccountResponse(accountNumber=ACC001, accountName=Test Account, balance=1000.00, accountType=ASSET)]
2025-06-08 23:44:47 - Completed 200 OK
2025-06-08 23:44:47 - Response 200 OK
2025-06-08 23:44:47 - Reading to [com.example.ledger.dto.AccountResponse]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 45, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 46, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 47, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 48, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 49, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 50, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 51, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - After test method: class [ApiIntegrationTest], method [testCreateAndGetAccount], class annotated with @DirtiesContext [false] with mode [null], method annotated with @DirtiesContext [false] with mode [null]
]]></system-out>
  </testcase>
  <testcase name="testCreateAccount_Idempotency" classname="com.example.ledger.integration.ApiIntegrationTest" time="0.019">
    <system-out><![CDATA[2025-06-08 23:44:47 - Performing dependency injection for test class com.example.ledger.integration.ApiIntegrationTest
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 52, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 53, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Before test method: class [ApiIntegrationTest], method [testCreateAccount_Idempotency], class annotated with @DirtiesContext [false] with mode [null], method annotated with @DirtiesContext [false] with mode [null]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 54, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 55, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 56, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - 
    select
        je1_0.id,
        je1_0.account_id,
        je1_0.credit_amount,
        je1_0.debit_amount,
        je1_0.description,
        je1_0.timestamp,
        je1_0.transaction_id 
    from
        journal_entry je1_0
Hibernate: 
    select
        je1_0.id,
        je1_0.account_id,
        je1_0.credit_amount,
        je1_0.debit_amount,
        je1_0.description,
        je1_0.timestamp,
        je1_0.transaction_id 
    from
        journal_entry je1_0
2025-06-08 23:44:47 - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.description,
        t1_0.from_account_id,
        t1_0.reference_id,
        t1_0.timestamp,
        t1_0.to_account_id 
    from
        transactions t1_0
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.description,
        t1_0.from_account_id,
        t1_0.reference_id,
        t1_0.timestamp,
        t1_0.to_account_id 
    from
        transactions t1_0
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0
2025-06-08 23:44:47 - 
    delete 
    from
        accounts 
    where
        id=? 
        and version=?
Hibernate: 
    delete 
    from
        accounts 
    where
        id=? 
        and version=?
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 57, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - HTTP POST http://localhost:58912/api/ledger/accounts
2025-06-08 23:44:47 - Accept=[application/json, application/*+json]
2025-06-08 23:44:47 - Writing [Account(id=null, accountNumber=ACC002, accountName=Idempotent Account, balance=2000.00, accountType=LIABILITY, createdAt=null, updatedAt=null, version=null)] with org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
2025-06-08 23:44:47 - POST "/api/ledger/accounts", parameters={}
2025-06-08 23:44:47 - Mapped to com.example.ledger.controller.LedgerController#createAccount(Account)
2025-06-08 23:44:47 - Read "application/json;charset=UTF-8" to [Account(id=null, accountNumber=ACC002, accountName=Idempotent Account, balance=2000.00, accountType= (truncated)...]
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:47 - 
    insert 
    into
        accounts
        (account_name, account_number, account_type, balance, created_at, updated_at, version, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        accounts
        (account_name, account_number, account_type, balance, created_at, updated_at, version, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-06-08 23:44:47 - Using 'application/json', given [application/json, application/*+json] and supported [*/*]
2025-06-08 23:44:47 - Completed 200 OK
2025-06-08 23:44:47 - Response 200 OK
2025-06-08 23:44:47 - 
    select
        count(*) 
    from
        accounts a1_0
Hibernate: 
    select
        count(*) 
    from
        accounts a1_0
2025-06-08 23:44:47 - HTTP POST http://localhost:58912/api/ledger/accounts
2025-06-08 23:44:47 - Accept=[application/json, application/*+json]
2025-06-08 23:44:47 - Writing [Account(id=null, accountNumber=ACC002, accountName=Idempotent Account, balance=2000.00, accountType=LIABILITY, createdAt=null, updatedAt=null, version=null)] with org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
2025-06-08 23:44:47 - POST "/api/ledger/accounts", parameters={}
2025-06-08 23:44:47 - Mapped to com.example.ledger.controller.LedgerController#createAccount(Account)
2025-06-08 23:44:47 - Read "application/json;charset=UTF-8" to [Account(id=null, accountNumber=ACC002, accountName=Idempotent Account, balance=2000.00, accountType= (truncated)...]
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:47 - Using @ExceptionHandler com.example.ledger.exception.RestExceptionHandler#handleDuplicateAccount(DuplicateAccountException, WebRequest)
2025-06-08 23:44:47 - Using 'application/json', given [application/json, application/*+json] and supported [application/json, application/*+json]
2025-06-08 23:44:47 - Writing [{error=Account with this number already exists}]
2025-06-08 23:44:47 - Resolved [com.example.ledger.exception.DuplicateAccountException: Account with this number already exists]
2025-06-08 23:44:47 - Completed 409 CONFLICT
2025-06-08 23:44:47 - Response 409 CONFLICT
2025-06-08 23:44:47 - Reading to [java.util.Map<?, ?>]
2025-06-08 23:44:47 - 
    select
        count(*) 
    from
        accounts a1_0
Hibernate: 
    select
        count(*) 
    from
        accounts a1_0
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 58, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 59, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 60, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 61, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 62, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 63, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 64, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - After test method: class [ApiIntegrationTest], method [testCreateAccount_Idempotency], class annotated with @DirtiesContext [false] with mode [null], method annotated with @DirtiesContext [false] with mode [null]
]]></system-out>
  </testcase>
  <testcase name="testTransfer_InsufficientFunds" classname="com.example.ledger.integration.ApiIntegrationTest" time="0.022">
    <system-out><![CDATA[2025-06-08 23:44:47 - Performing dependency injection for test class com.example.ledger.integration.ApiIntegrationTest
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 65, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 66, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Before test method: class [ApiIntegrationTest], method [testTransfer_InsufficientFunds], class annotated with @DirtiesContext [false] with mode [null], method annotated with @DirtiesContext [false] with mode [null]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 67, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 68, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 69, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - 
    select
        je1_0.id,
        je1_0.account_id,
        je1_0.credit_amount,
        je1_0.debit_amount,
        je1_0.description,
        je1_0.timestamp,
        je1_0.transaction_id 
    from
        journal_entry je1_0
Hibernate: 
    select
        je1_0.id,
        je1_0.account_id,
        je1_0.credit_amount,
        je1_0.debit_amount,
        je1_0.description,
        je1_0.timestamp,
        je1_0.transaction_id 
    from
        journal_entry je1_0
2025-06-08 23:44:47 - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.description,
        t1_0.from_account_id,
        t1_0.reference_id,
        t1_0.timestamp,
        t1_0.to_account_id 
    from
        transactions t1_0
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.description,
        t1_0.from_account_id,
        t1_0.reference_id,
        t1_0.timestamp,
        t1_0.to_account_id 
    from
        transactions t1_0
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0
2025-06-08 23:44:47 - 
    delete 
    from
        accounts 
    where
        id=? 
        and version=?
Hibernate: 
    delete 
    from
        accounts 
    where
        id=? 
        and version=?
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 70, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - HTTP POST http://localhost:58912/api/ledger/accounts
2025-06-08 23:44:47 - Accept=[application/json, application/*+json]
2025-06-08 23:44:47 - Writing [Account(id=null, accountNumber=ACC_SRC_2, accountName=Test Account ACC_SRC_2, balance=100.00, accountType=ASSET, createdAt=null, updatedAt=null, version=null)] with org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
2025-06-08 23:44:47 - POST "/api/ledger/accounts", parameters={}
2025-06-08 23:44:47 - Mapped to com.example.ledger.controller.LedgerController#createAccount(Account)
2025-06-08 23:44:47 - Read "application/json;charset=UTF-8" to [Account(id=null, accountNumber=ACC_SRC_2, accountName=Test Account ACC_SRC_2, balance=100.00, accoun (truncated)...]
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:47 - 
    insert 
    into
        accounts
        (account_name, account_number, account_type, balance, created_at, updated_at, version, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        accounts
        (account_name, account_number, account_type, balance, created_at, updated_at, version, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-06-08 23:44:47 - Using 'application/json', given [application/json, application/*+json] and supported [*/*]
2025-06-08 23:44:47 - Completed 200 OK
2025-06-08 23:44:47 - Response 200 OK
2025-06-08 23:44:47 - HTTP POST http://localhost:58912/api/ledger/accounts
2025-06-08 23:44:47 - Accept=[application/json, application/*+json]
2025-06-08 23:44:47 - Writing [Account(id=null, accountNumber=ACC_DST_2, accountName=Test Account ACC_DST_2, balance=500.00, accountType=ASSET, createdAt=null, updatedAt=null, version=null)] with org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
2025-06-08 23:44:47 - POST "/api/ledger/accounts", parameters={}
2025-06-08 23:44:47 - Mapped to com.example.ledger.controller.LedgerController#createAccount(Account)
2025-06-08 23:44:47 - Read "application/json;charset=UTF-8" to [Account(id=null, accountNumber=ACC_DST_2, accountName=Test Account ACC_DST_2, balance=500.00, accoun (truncated)...]
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:47 - 
    insert 
    into
        accounts
        (account_name, account_number, account_type, balance, created_at, updated_at, version, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        accounts
        (account_name, account_number, account_type, balance, created_at, updated_at, version, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-06-08 23:44:47 - Using 'application/json', given [application/json, application/*+json] and supported [*/*]
2025-06-08 23:44:47 - Completed 200 OK
2025-06-08 23:44:47 - Response 200 OK
2025-06-08 23:44:47 - HTTP POST http://localhost:58912/api/ledger/transfer
2025-06-08 23:44:47 - Accept=[application/json, application/*+json]
2025-06-08 23:44:47 - Writing [TransferRequest(fromAccountNumber=ACC_SRC_2, toAccountNumber=ACC_DST_2, amount=200.00, description=Transfer attempt, referenceId=85add8c3-a433-4162-9814-832d4fa76bd0)] with org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
2025-06-08 23:44:47 - POST "/api/ledger/transfer", parameters={}
2025-06-08 23:44:47 - Mapped to com.example.ledger.controller.LedgerController#executeTransfer(TransferRequest)
2025-06-08 23:44:47 - Read "application/json;charset=UTF-8" to [TransferRequest(fromAccountNumber=ACC_SRC_2, toAccountNumber=ACC_DST_2, amount=200.00, description=T (truncated)...]
2025-06-08 23:44:47 - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.description,
        t1_0.from_account_id,
        t1_0.reference_id,
        t1_0.timestamp,
        t1_0.to_account_id 
    from
        transactions t1_0 
    where
        t1_0.reference_id=?
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.description,
        t1_0.from_account_id,
        t1_0.reference_id,
        t1_0.timestamp,
        t1_0.to_account_id 
    from
        transactions t1_0 
    where
        t1_0.reference_id=?
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:47 - Using @ExceptionHandler com.example.ledger.exception.RestExceptionHandler#handleInsufficientFunds(InsufficientFundsException, WebRequest)
2025-06-08 23:44:47 - Using 'application/json', given [application/json, application/*+json] and supported [application/json, application/*+json]
2025-06-08 23:44:47 - Writing [{error=Insufficient funds}]
2025-06-08 23:44:47 - Resolved [com.example.ledger.exception.InsufficientFundsException: Insufficient funds]
2025-06-08 23:44:47 - Completed 400 BAD_REQUEST
2025-06-08 23:44:47 - Response 400 BAD_REQUEST
2025-06-08 23:44:47 - Reading to [java.util.Map<?, ?>]
2025-06-08 23:44:47 - HTTP GET http://localhost:58912/api/ledger/accounts/ACC_SRC_2
2025-06-08 23:44:47 - Accept=[application/json, application/*+json]
2025-06-08 23:44:47 - GET "/api/ledger/accounts/ACC_SRC_2", parameters={}
2025-06-08 23:44:47 - Mapped to com.example.ledger.controller.LedgerController#getAccount(String)
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:47 - Using 'application/json', given [application/json, application/*+json] and supported [application/json, application/*+json]
2025-06-08 23:44:47 - Writing [AccountResponse(accountNumber=ACC_SRC_2, accountName=Test Account ACC_SRC_2, balance=100.00, account (truncated)...]
2025-06-08 23:44:47 - Completed 200 OK
2025-06-08 23:44:47 - Response 200 OK
2025-06-08 23:44:47 - Reading to [com.example.ledger.dto.AccountResponse]
2025-06-08 23:44:47 - HTTP GET http://localhost:58912/api/ledger/accounts/ACC_DST_2
2025-06-08 23:44:47 - Accept=[application/json, application/*+json]
2025-06-08 23:44:47 - GET "/api/ledger/accounts/ACC_DST_2", parameters={}
2025-06-08 23:44:47 - Mapped to com.example.ledger.controller.LedgerController#getAccount(String)
2025-06-08 23:44:47 - 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
Hibernate: 
    select
        a1_0.id,
        a1_0.account_name,
        a1_0.account_number,
        a1_0.account_type,
        a1_0.balance,
        a1_0.created_at,
        a1_0.updated_at,
        a1_0.version 
    from
        accounts a1_0 
    where
        a1_0.account_number=?
2025-06-08 23:44:47 - Using 'application/json', given [application/json, application/*+json] and supported [application/json, application/*+json]
2025-06-08 23:44:47 - Writing [AccountResponse(accountNumber=ACC_DST_2, accountName=Test Account ACC_DST_2, balance=500.00, account (truncated)...]
2025-06-08 23:44:47 - Completed 200 OK
2025-06-08 23:44:47 - Response 200 OK
2025-06-08 23:44:47 - Reading to [com.example.ledger.dto.AccountResponse]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 71, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 72, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 73, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 74, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 75, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 76, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - Spring test ApplicationContext cache statistics: [DefaultContextCache@463fc3f6 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 77, missCount = 1, failureCount = 0]
2025-06-08 23:44:47 - After test method: class [ApiIntegrationTest], method [testTransfer_InsufficientFunds], class annotated with @DirtiesContext [false] with mode [null], method annotated with @DirtiesContext [false] with mode [null]
]]></system-out>
  </testcase>
</testsuite>